/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#define SWIG_FILE_WITH_INIT
#include "UMS_Data.hpp"
#include "TMS_Data.hpp"
#include "IMS_Data.hpp"
#include "FMS_Data.hpp"
#include "VishnuException.hpp"
#include "UserException.hpp"
#include "SystemException.hpp"
#include "UMSVishnuException.hpp"
#include "TMSVishnuException.hpp"
#include "IMSVishnuException.hpp"
#include "FMSVishnuException.hpp"
#ifdef COMPILE_UMS
#include "api_ums.hpp"
#endif
#ifdef COMPILE_TMS
#include "api_tms.hpp"
#endif
#ifdef COMPILE_IMS
#include "api_ims.hpp"
#endif
#ifdef COMPILE_FMS
#include "api_fms.hpp"
#endif

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl__ecore_EString_Sg__get(std::vector< ::ecore::EString > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl__ecore_EString_Sg__set(std::vector< ::ecore::EString > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1EObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ecore::EObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ecore::EObject *)new ecore::EObject();
  *(ecore::EObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecore::EObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eIsProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (::ecore::EBoolean)(arg1)->eIsProxy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EResource result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (::ecore::EResource)(arg1)->eResource();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EObject_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (::ecore::EObject_ptr)(arg1)->eContainer();
  *(::ecore::EObject_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eContainingFeature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EStructuralFeature_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (::ecore::EStructuralFeature_ptr)(arg1)->eContainingFeature();
  *(::ecore::EStructuralFeature_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eContainmentFeature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EReference_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (::ecore::EReference_ptr)(arg1)->eContainmentFeature();
  *(::ecore::EReference_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eContents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  SwigValueWrapper< std::list< ecore::EObject * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (arg1)->eContents();
  *(std::list< ::ecore::EObject_ptr > **)&jresult = new std::list< ::ecore::EObject_ptr >((const std::list< ::ecore::EObject_ptr > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eAllContents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (int)(arg1)->eAllContents();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eCrossReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  SwigValueWrapper< std::list< ecore::EObject * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (arg1)->eCrossReferences();
  *(std::list< ::ecore::EObject_ptr > **)&jresult = new std::list< ::ecore::EObject_ptr >((const std::list< ::ecore::EObject_ptr > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eGet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EStructuralFeature_ptr arg2 = (::ecore::EStructuralFeature_ptr) 0 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = *(::ecore::EStructuralFeature_ptr *)&jarg2; 
  result = (arg1)->eGet(arg2);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eGet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EStructuralFeature_ptr arg2 = (::ecore::EStructuralFeature_ptr) 0 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = *(::ecore::EStructuralFeature_ptr *)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EStructuralFeature_ptr arg2 = (::ecore::EStructuralFeature_ptr) 0 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = *(::ecore::EStructuralFeature_ptr *)&jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eIsSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EStructuralFeature_ptr arg2 = (::ecore::EStructuralFeature_ptr) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = *(::ecore::EStructuralFeature_ptr *)&jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eUnset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EStructuralFeature_ptr arg2 = (::ecore::EStructuralFeature_ptr) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = *(::ecore::EStructuralFeature_ptr *)&jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eInvoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EOperation_ptr arg2 = (::ecore::EOperation_ptr) 0 ;
  std::list< ::ecorecpp::mapping::any > *arg3 = 0 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = *(::ecore::EOperation_ptr *)&jarg2; 
  arg3 = *(std::list< ::ecorecpp::mapping::any > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ::ecorecpp::mapping::any > const & reference is null");
    return 0;
  } 
  result = (arg1)->eInvoke(arg2,(std::list< ::ecorecpp::mapping::any > const &)*arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eGet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eIsSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1eUnset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecore::EObject **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EObject_1_1setEContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ecore::EObject *arg1 = (ecore::EObject *) 0 ;
  ::ecore::EObject_ptr arg2 = (::ecore::EObject_ptr) 0 ;
  ::ecore::EStructuralFeature_ptr arg3 = (::ecore::EStructuralFeature_ptr) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecore::EObject **)&jarg1; 
  arg2 = *(::ecore::EObject_ptr *)&jarg2; 
  arg3 = *(::ecore::EStructuralFeature_ptr *)&jarg3; 
  (arg1)->_setEContainer(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ConnectOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ConnectOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ConnectOptions *)new UMS_Data::ConnectOptions();
  *(UMS_Data::ConnectOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ConnectOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1getClosePolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::UMS_Data::SessionCloseType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  result = (::UMS_Data::SessionCloseType)((UMS_Data::ConnectOptions const *)arg1)->getClosePolicy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1setClosePolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::UMS_Data::SessionCloseType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  arg2 = (::UMS_Data::SessionCloseType)jarg2; 
  (arg1)->setClosePolicy(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1getSessionInactivityDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  result = (::ecore::EInt)((UMS_Data::ConnectOptions const *)arg1)->getSessionInactivityDelay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1setSessionInactivityDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setSessionInactivityDelay(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1getSubstituteUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ConnectOptions const *)arg1)->getSubstituteUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1setSubstituteUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSubstituteUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ConnectOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ConnectOptions *arg1 = (UMS_Data::ConnectOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ConnectOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Session(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::Session *)new UMS_Data::Session();
  *(UMS_Data::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Session const *)arg1)->getSessionId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Session const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getSessionKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Session const *)arg1)->getSessionKey();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setSessionKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionKey((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getDateLastConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::Session const *)arg1)->getDateLastConnect();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setDateLastConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setDateLastConnect(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getDateCreation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::Session const *)arg1)->getDateCreation();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setDateCreation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setDateCreation(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getDateClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::Session const *)arg1)->getDateClosure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setDateClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setDateClosure(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::UMS_Data::StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (::UMS_Data::StatusType)((UMS_Data::Session const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::UMS_Data::StatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::UMS_Data::StatusType)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getClosePolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::UMS_Data::SessionCloseType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (::UMS_Data::SessionCloseType)((UMS_Data::Session const *)arg1)->getClosePolicy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setClosePolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::UMS_Data::SessionCloseType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::UMS_Data::SessionCloseType)jarg2; 
  (arg1)->setClosePolicy(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1getTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::Session const *)arg1)->getTimeout();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1setTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setTimeout(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Session_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Session *arg1 = (UMS_Data::Session *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Session **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListSessions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListSessions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListSessions *)new UMS_Data::ListSessions();
  *(UMS_Data::ListSessions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListSessions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessions_1getSessions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::Session > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::Session > *) &(arg1)->getSessions();
  *(::ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListSessions *arg1 = (UMS_Data::ListSessions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListSessionOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListSessionOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListSessionOptions *)new UMS_Data::ListSessionOptions();
  *(UMS_Data::ListSessionOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListSessionOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::UMS_Data::StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (::UMS_Data::StatusType)((UMS_Data::ListSessionOptions const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::UMS_Data::StatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::UMS_Data::StatusType)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getSessionClosePolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::UMS_Data::SessionCloseType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (::UMS_Data::SessionCloseType)((UMS_Data::ListSessionOptions const *)arg1)->getSessionClosePolicy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setSessionClosePolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::UMS_Data::SessionCloseType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::UMS_Data::SessionCloseType)jarg2; 
  (arg1)->setSessionClosePolicy(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getSessionInactivityDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (::ecore::EInt)((UMS_Data::ListSessionOptions const *)arg1)->getSessionInactivityDelay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setSessionInactivityDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setSessionInactivityDelay(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListSessionOptions const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1isAdminListOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (::ecore::EBoolean)((UMS_Data::ListSessionOptions const *)arg1)->isAdminListOption();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setAdminListOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdminListOption(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListSessionOptions const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListSessionOptions const *)arg1)->getSessionId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getStartDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::ListSessionOptions const *)arg1)->getStartDateOption();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setStartDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setStartDateOption(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1getEndDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::ListSessionOptions const *)arg1)->getEndDateOption();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1setEndDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setEndDateOption(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSessionOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListSessionOptions *arg1 = (UMS_Data::ListSessionOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListSessionOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1User(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::User *)new UMS_Data::User();
  *(UMS_Data::User **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1User(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::User **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::User const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1getPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::User const *)arg1)->getPassword();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1setPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPassword((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1getFirstname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::User const *)arg1)->getFirstname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1setFirstname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFirstname((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1getLastname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::User const *)arg1)->getLastname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1setLastname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setLastname((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1getPrivilege(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::UMS_Data::PrivilegeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (::UMS_Data::PrivilegeType)((UMS_Data::User const *)arg1)->getPrivilege();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1setPrivilege(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::UMS_Data::PrivilegeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  arg2 = (::UMS_Data::PrivilegeType)jarg2; 
  (arg1)->setPrivilege(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1getEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::User const *)arg1)->getEmail();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1setEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEmail((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::UMS_Data::StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (::UMS_Data::StatusType)((UMS_Data::User const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::UMS_Data::StatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  arg2 = (::UMS_Data::StatusType)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_User_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::User *arg1 = (UMS_Data::User *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::User **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListUsers(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListUsers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListUsers *)new UMS_Data::ListUsers();
  *(UMS_Data::ListUsers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListUsers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListUsers_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListUsers_1getUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::User > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::User > *) &(arg1)->getUsers();
  *(::ecorecpp::mapping::EList< ::UMS_Data::User > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListUsers_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListUsers_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListUsers_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListUsers_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListUsers_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListUsers *arg1 = (UMS_Data::ListUsers *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListUsers **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Command(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::Command *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::Command *)new UMS_Data::Command();
  *(UMS_Data::Command **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Command(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1getCommandId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Command const *)arg1)->getCommandId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1setCommandId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCommandId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1getSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Command const *)arg1)->getSessionId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1setSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Command const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1getCmdDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Command const *)arg1)->getCmdDescription();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1setCmdDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCmdDescription((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1getCmdStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::Command const *)arg1)->getCmdStartTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1setCmdStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setCmdStartTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1getCmdEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::Command const *)arg1)->getCmdEndTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1setCmdEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setCmdEndTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::UMS_Data::CommandStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (::UMS_Data::CommandStatusType)((UMS_Data::Command const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::UMS_Data::CommandStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  arg2 = (::UMS_Data::CommandStatusType)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Command_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Command *arg1 = (UMS_Data::Command *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Command **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListCommands *)new UMS_Data::ListCommands();
  *(UMS_Data::ListCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCommands_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCommands_1getCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::Command > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::Command > *) &(arg1)->getCommands();
  *(::ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCommands_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCommands_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCommands_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCommands_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCommands_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListCommands *arg1 = (UMS_Data::ListCommands *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCommands **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListCmdOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListCmdOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListCmdOptions *)new UMS_Data::ListCmdOptions();
  *(UMS_Data::ListCmdOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListCmdOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1isAdminListOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  result = (::ecore::EBoolean)((UMS_Data::ListCmdOptions const *)arg1)->isAdminListOption();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1setAdminListOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdminListOption(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListCmdOptions const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1getSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListCmdOptions const *)arg1)->getSessionId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1setSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1getStartDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::ListCmdOptions const *)arg1)->getStartDateOption();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1setStartDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setStartDateOption(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1getEndDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  result = (::ecore::ELong)((UMS_Data::ListCmdOptions const *)arg1)->getEndDateOption();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1setEndDateOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setEndDateOption(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListCmdOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListCmdOptions *arg1 = (UMS_Data::ListCmdOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListCmdOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1LocalAccount(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::LocalAccount *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::LocalAccount *)new UMS_Data::LocalAccount();
  *(UMS_Data::LocalAccount **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1LocalAccount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::LocalAccount const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::LocalAccount const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1getAcLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::LocalAccount const *)arg1)->getAcLogin();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1setAcLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setAcLogin((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1getSshKeyPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::LocalAccount const *)arg1)->getSshKeyPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1setSshKeyPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSshKeyPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1getHomeDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::LocalAccount const *)arg1)->getHomeDirectory();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1setHomeDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setHomeDirectory((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LocalAccount_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::LocalAccount *arg1 = (UMS_Data::LocalAccount *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::LocalAccount **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListLocalAccounts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListLocalAccounts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListLocalAccounts *)new UMS_Data::ListLocalAccounts();
  *(UMS_Data::ListLocalAccounts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListLocalAccounts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccounts_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccounts_1getAccounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) &(arg1)->getAccounts();
  *(::ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccounts_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccounts_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccounts_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccounts_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccounts_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListLocalAccounts *arg1 = (UMS_Data::ListLocalAccounts *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccounts **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListLocalAccOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListLocalAccOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListLocalAccOptions *)new UMS_Data::ListLocalAccOptions();
  *(UMS_Data::ListLocalAccOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListLocalAccOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1isAdminListOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  result = (::ecore::EBoolean)((UMS_Data::ListLocalAccOptions const *)arg1)->isAdminListOption();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1setAdminListOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdminListOption(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListLocalAccOptions const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListLocalAccOptions const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListLocalAccOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListLocalAccOptions *arg1 = (UMS_Data::ListLocalAccOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListLocalAccOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Machine(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::Machine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::Machine *)new UMS_Data::Machine();
  *(UMS_Data::Machine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Machine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Machine const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Machine const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1getSite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Machine const *)arg1)->getSite();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1setSite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSite((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1getMachineDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Machine const *)arg1)->getMachineDescription();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1setMachineDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineDescription((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1getLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Machine const *)arg1)->getLanguage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1setLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setLanguage((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ::UMS_Data::StatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (::UMS_Data::StatusType)((UMS_Data::Machine const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ::UMS_Data::StatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  arg2 = (::UMS_Data::StatusType)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1getSshPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Machine const *)arg1)->getSshPublicKey();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1setSshPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSshPublicKey((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Machine_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Machine *arg1 = (UMS_Data::Machine *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Machine **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListMachines(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListMachines *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListMachines *)new UMS_Data::ListMachines();
  *(UMS_Data::ListMachines **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListMachines(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachines_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachines_1getMachines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::Machine > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::Machine > *) &(arg1)->getMachines();
  *(::ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachines_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachines_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachines_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachines_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachines_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListMachines *arg1 = (UMS_Data::ListMachines *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachines **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListMachineOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListMachineOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListMachineOptions *)new UMS_Data::ListMachineOptions();
  *(UMS_Data::ListMachineOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListMachineOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListMachineOptions const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1isListAllmachine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  result = (::ecore::EBoolean)((UMS_Data::ListMachineOptions const *)arg1)->isListAllmachine();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1setListAllmachine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setListAllmachine(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListMachineOptions const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMachineOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListMachineOptions *arg1 = (UMS_Data::ListMachineOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListMachineOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Configuration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::Configuration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::Configuration *)new UMS_Data::Configuration();
  *(UMS_Data::Configuration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Configuration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1getFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::Configuration const *)arg1)->getFilePath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1setFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFilePath((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1getListConfUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::User > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::User > *) &(arg1)->getListConfUsers();
  *(::ecorecpp::mapping::EList< ::UMS_Data::User > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1getListConfMachines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::Machine > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::Machine > *) &(arg1)->getListConfMachines();
  *(::ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1getListConfLocalAccounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) &(arg1)->getListConfLocalAccounts();
  *(::ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Configuration_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::Configuration *arg1 = (UMS_Data::Configuration *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::Configuration **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1OptionValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::OptionValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::OptionValue *)new UMS_Data::OptionValue();
  *(UMS_Data::OptionValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1OptionValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1getOptionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::OptionValue const *)arg1)->getOptionName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1setOptionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOptionName((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::OptionValue const *)arg1)->getValue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValue((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_OptionValue_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::OptionValue *arg1 = (UMS_Data::OptionValue *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::OptionValue **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListOptionsValues(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListOptionsValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListOptionsValues *)new UMS_Data::ListOptionsValues();
  *(UMS_Data::ListOptionsValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListOptionsValues(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptionsValues_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptionsValues_1getOptionValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  ::ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) &(arg1)->getOptionValues();
  *(::ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptionsValues_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptionsValues_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptionsValues_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptionsValues_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptionsValues_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListOptionsValues *arg1 = (UMS_Data::ListOptionsValues *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptionsValues **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListOptOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UMS_Data::ListOptOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UMS_Data::ListOptOptions *)new UMS_Data::ListOptOptions();
  *(UMS_Data::ListOptOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListOptOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1isListAllDeftValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  result = (::ecore::EBoolean)((UMS_Data::ListOptOptions const *)arg1)->isListAllDeftValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1setListAllDeftValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setListAllDeftValue(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListOptOptions const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1getOptionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  result = (ecore::EString *) &((UMS_Data::ListOptOptions const *)arg1)->getOptionName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1setOptionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOptionName((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListOptOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UMS_Data::ListOptOptions *arg1 = (UMS_Data::ListOptOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UMS_Data::ListOptOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Job(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::Job *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::Job *)new TMS_Data::Job();
  *(TMS_Data::Job **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Job(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getSessionId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getSubmitMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getSubmitMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setSubmitMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSubmitMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getSubmitMachineName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getSubmitMachineName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setSubmitMachineName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSubmitMachineName((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getJobId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getJobName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getJobName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setJobName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobName((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getJobPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getJobPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setJobPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getOutputPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getOutputPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setOutputPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getErrorPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getErrorPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setErrorPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setErrorPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getJobPrio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::TMS_Data::JobPriority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::TMS_Data::JobPriority)((TMS_Data::Job const *)arg1)->getJobPrio();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setJobPrio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::TMS_Data::JobPriority arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::TMS_Data::JobPriority)jarg2; 
  (arg1)->setJobPrio(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getNbCpus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Job const *)arg1)->getNbCpus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setNbCpus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbCpus(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getJobWorkingDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getJobWorkingDir();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setJobWorkingDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobWorkingDir((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::TMS_Data::JobStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::TMS_Data::JobStatus)((TMS_Data::Job const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::TMS_Data::JobStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::TMS_Data::JobStatus)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getSubmitDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::Job const *)arg1)->getSubmitDate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setSubmitDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setSubmitDate(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getEndDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::Job const *)arg1)->getEndDate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setEndDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setEndDate(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getOwner();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOwner((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getJobQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getJobQueue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setJobQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobQueue((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getWallClockLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::Job const *)arg1)->getWallClockLimit();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setWallClockLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setWallClockLimit(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getGroupName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getGroupName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setGroupName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setGroupName((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getJobDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getJobDescription();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setJobDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobDescription((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getMemLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Job const *)arg1)->getMemLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setMemLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setMemLimit(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getNbNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Job const *)arg1)->getNbNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setNbNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbNodes(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1getNbNodesAndCpuPerNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Job const *)arg1)->getNbNodesAndCpuPerNode();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1setNbNodesAndCpuPerNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNbNodesAndCpuPerNode((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Job_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Job *arg1 = (TMS_Data::Job *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Job **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1JobResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::JobResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::JobResult *)new TMS_Data::JobResult();
  *(TMS_Data::JobResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1JobResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1getJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::JobResult const *)arg1)->getJobId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1setJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1getOutputPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::JobResult const *)arg1)->getOutputPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1setOutputPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1getErrorPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::JobResult const *)arg1)->getErrorPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1setErrorPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setErrorPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_JobResult_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::JobResult *arg1 = (TMS_Data::JobResult *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::JobResult **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListJobResults(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::ListJobResults *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::ListJobResults *)new TMS_Data::ListJobResults();
  *(TMS_Data::ListJobResults **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListJobResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1getNbJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::ListJobResults const *)arg1)->getNbJobs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1setNbJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbJobs(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1getResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecorecpp::mapping::EList< ::TMS_Data::JobResult > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) &(arg1)->getResults();
  *(::ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobResults_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobResults *arg1 = (TMS_Data::ListJobResults *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobResults **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListJobs(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::ListJobs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::ListJobs *)new TMS_Data::ListJobs();
  *(TMS_Data::ListJobs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListJobs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1getNbJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::ListJobs const *)arg1)->getNbJobs();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1setNbJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setNbJobs(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1getNbRunningJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::ListJobs const *)arg1)->getNbRunningJobs();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1setNbRunningJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setNbRunningJobs(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1getNbWaitingJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::ListJobs const *)arg1)->getNbWaitingJobs();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1setNbWaitingJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setNbWaitingJobs(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1getJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecorecpp::mapping::EList< ::TMS_Data::Job > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::TMS_Data::Job > *) &(arg1)->getJobs();
  *(::ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobs_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobs *arg1 = (TMS_Data::ListJobs *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobs **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListJobsOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::ListJobsOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::ListJobsOptions *)new TMS_Data::ListJobsOptions();
  *(TMS_Data::ListJobsOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListJobsOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::ListJobsOptions const *)arg1)->getJobId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobId((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getNbCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::ListJobsOptions const *)arg1)->getNbCpu();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setNbCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbCpu(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getFromSubmitDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::ListJobsOptions const *)arg1)->getFromSubmitDate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setFromSubmitDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setFromSubmitDate(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getToSubmitDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::ListJobsOptions const *)arg1)->getToSubmitDate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setToSubmitDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setToSubmitDate(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::ListJobsOptions const *)arg1)->getOwner();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOwner((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::TMS_Data::JobStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (::TMS_Data::JobStatus)((TMS_Data::ListJobsOptions const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::TMS_Data::JobStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::TMS_Data::JobStatus)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::TMS_Data::JobPriority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (::TMS_Data::JobPriority)((TMS_Data::ListJobsOptions const *)arg1)->getPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::TMS_Data::JobPriority arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::TMS_Data::JobPriority)jarg2; 
  (arg1)->setPriority(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1getQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::ListJobsOptions const *)arg1)->getQueue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1setQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setQueue((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListJobsOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListJobsOptions *arg1 = (TMS_Data::ListJobsOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListJobsOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListProgression(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::ListProgression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::ListProgression *)new TMS_Data::ListProgression();
  *(TMS_Data::ListProgression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListProgression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1getNbJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::ListProgression const *)arg1)->getNbJobs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1setNbJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbJobs(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1getProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecorecpp::mapping::EList< ::TMS_Data::Progression > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::TMS_Data::Progression > *) &(arg1)->getProgress();
  *(::ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProgression_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListProgression *arg1 = (TMS_Data::ListProgression *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListProgression **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListQueues(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::ListQueues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::ListQueues *)new TMS_Data::ListQueues();
  *(TMS_Data::ListQueues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListQueues(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1getNbQueues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::ListQueues const *)arg1)->getNbQueues();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1setNbQueues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbQueues(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1getQueues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecorecpp::mapping::EList< ::TMS_Data::Queue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::TMS_Data::Queue > *) &(arg1)->getQueues();
  *(::ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListQueues_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ListQueues *arg1 = (TMS_Data::ListQueues *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ListQueues **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ProgressOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::ProgressOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::ProgressOptions *)new TMS_Data::ProgressOptions();
  *(TMS_Data::ProgressOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ProgressOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1getJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::ProgressOptions const *)arg1)->getJobId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1setJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1getJobOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::ProgressOptions const *)arg1)->getJobOwner();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1setJobOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobOwner((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProgressOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::ProgressOptions *arg1 = (TMS_Data::ProgressOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::ProgressOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Progression(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::Progression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::Progression *)new TMS_Data::Progression();
  *(TMS_Data::Progression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Progression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1getJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Progression const *)arg1)->getJobId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1setJobId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1getJobName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Progression const *)arg1)->getJobName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1setJobName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setJobName((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1getWallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Progression const *)arg1)->getWallTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1setWallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setWallTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::Progression const *)arg1)->getStartTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1setStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setStartTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1getEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::Progression const *)arg1)->getEndTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1setEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setEndTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1getPercent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Progression const *)arg1)->getPercent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1setPercent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setPercent(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::TMS_Data::JobStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (::TMS_Data::JobStatus)((TMS_Data::Progression const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::TMS_Data::JobStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::TMS_Data::JobStatus)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Progression_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Progression *arg1 = (TMS_Data::Progression *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Progression **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Queue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::Queue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::Queue *)new TMS_Data::Queue();
  *(TMS_Data::Queue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Queue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Queue const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getMaxJobCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Queue const *)arg1)->getMaxJobCpu();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setMaxJobCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setMaxJobCpu(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getMaxProcCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Queue const *)arg1)->getMaxProcCpu();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setMaxProcCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setMaxProcCpu(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Queue const *)arg1)->getMemory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setMemory(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getWallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::ELong)((TMS_Data::Queue const *)arg1)->getWallTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setWallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setWallTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Queue const *)arg1)->getNode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNode(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getNbRunningJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Queue const *)arg1)->getNbRunningJobs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setNbRunningJobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbRunningJobs(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getNbJobsInQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::Queue const *)arg1)->getNbJobsInQueue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setNbJobsInQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbJobsInQueue(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::TMS_Data::QueueStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::TMS_Data::QueueStatus)((TMS_Data::Queue const *)arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::TMS_Data::QueueStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::TMS_Data::QueueStatus)jarg2; 
  (arg1)->setState(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::TMS_Data::QueuePriority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::TMS_Data::QueuePriority)((TMS_Data::Queue const *)arg1)->getPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::TMS_Data::QueuePriority arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::TMS_Data::QueuePriority)jarg2; 
  (arg1)->setPriority(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::Queue const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Queue_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::Queue *arg1 = (TMS_Data::Queue *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::Queue **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1SubmitOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TMS_Data::SubmitOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TMS_Data::SubmitOptions *)new TMS_Data::SubmitOptions();
  *(TMS_Data::SubmitOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1SubmitOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::SubmitOptions const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::SubmitOptions const *)arg1)->getQueue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setQueue((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getWallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::SubmitOptions const *)arg1)->getWallTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setWallTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setWallTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::SubmitOptions const *)arg1)->getMemory();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setMemory(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getNbCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (::ecore::EInt)((TMS_Data::SubmitOptions const *)arg1)->getNbCpu();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setNbCpu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNbCpu(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getNbNodesAndCpuPerNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::SubmitOptions const *)arg1)->getNbNodesAndCpuPerNode();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setNbNodesAndCpuPerNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNbNodesAndCpuPerNode((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getOutputPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::SubmitOptions const *)arg1)->getOutputPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setOutputPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1getErrorPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (ecore::EString *) &((TMS_Data::SubmitOptions const *)arg1)->getErrorPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1setErrorPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setErrorPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SubmitOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TMS_Data::SubmitOptions *arg1 = (TMS_Data::SubmitOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TMS_Data::SubmitOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ExportOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::ExportOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::ExportOp *)new IMS_Data::ExportOp();
  *(IMS_Data::ExportOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ExportOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1getExportType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  ::IMS_Data::ExportType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  result = (::IMS_Data::ExportType)((IMS_Data::ExportOp const *)arg1)->getExportType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1setExportType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  ::IMS_Data::ExportType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  arg2 = (::IMS_Data::ExportType)jarg2; 
  (arg1)->setExportType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ExportOp_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ExportOp *arg1 = (IMS_Data::ExportOp *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ExportOp **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1CurMetricOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::CurMetricOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::CurMetricOp *)new IMS_Data::CurMetricOp();
  *(IMS_Data::CurMetricOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1CurMetricOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1getMetricType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  ::IMS_Data::MetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  result = (::IMS_Data::MetricType)((IMS_Data::CurMetricOp const *)arg1)->getMetricType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1setMetricType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  ::IMS_Data::MetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  arg2 = (::IMS_Data::MetricType)jarg2; 
  (arg1)->setMetricType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CurMetricOp_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::CurMetricOp *arg1 = (IMS_Data::CurMetricOp *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::CurMetricOp **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Metric(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::Metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::Metric *)new IMS_Data::Metric();
  *(IMS_Data::Metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::IMS_Data::MetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  result = (::IMS_Data::MetricType)((IMS_Data::Metric const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::IMS_Data::MetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  arg2 = (::IMS_Data::MetricType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::Metric const *)arg1)->getValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::Metric const *)arg1)->getTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Metric_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::Metric *arg1 = (IMS_Data::Metric *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Metric **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListMetric(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::ListMetric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::ListMetric *)new IMS_Data::ListMetric();
  *(IMS_Data::ListMetric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListMetric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMetric_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMetric_1getMetric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  ::ecorecpp::mapping::EList< ::IMS_Data::Metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::IMS_Data::Metric > *) &(arg1)->getMetric();
  *(::ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMetric_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMetric_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMetric_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMetric_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListMetric_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListMetric *arg1 = (IMS_Data::ListMetric *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListMetric **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListProcesses(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::ListProcesses *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::ListProcesses *)new IMS_Data::ListProcesses();
  *(IMS_Data::ListProcesses **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListProcesses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProcesses_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProcesses_1getProcess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  ::ecorecpp::mapping::EList< ::IMS_Data::Process > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::IMS_Data::Process > *) &(arg1)->getProcess();
  *(::ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProcesses_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProcesses_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProcesses_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProcesses_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListProcesses_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListProcesses *arg1 = (IMS_Data::ListProcesses *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListProcesses **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListSysInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::ListSysInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::ListSysInfo *)new IMS_Data::ListSysInfo();
  *(IMS_Data::ListSysInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListSysInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSysInfo_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSysInfo_1getSysInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  ::ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) &(arg1)->getSysInfo();
  *(::ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSysInfo_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSysInfo_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSysInfo_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSysInfo_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListSysInfo_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListSysInfo *arg1 = (IMS_Data::ListSysInfo *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListSysInfo **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ListThreshold(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::ListThreshold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::ListThreshold *)new IMS_Data::ListThreshold();
  *(IMS_Data::ListThreshold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ListThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListThreshold_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListThreshold_1getThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  ::ecorecpp::mapping::EList< ::IMS_Data::Threshold > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) &(arg1)->getThreshold();
  *(::ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListThreshold_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListThreshold_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListThreshold_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListThreshold_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ListThreshold_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ListThreshold *arg1 = (IMS_Data::ListThreshold *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ListThreshold **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1MetricHistOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::MetricHistOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::MetricHistOp *)new IMS_Data::MetricHistOp();
  *(IMS_Data::MetricHistOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1MetricHistOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::MetricHistOp const *)arg1)->getStartTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1setStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setStartTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1getEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::MetricHistOp const *)arg1)->getEndTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1setEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setEndTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::IMS_Data::MetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  result = (::IMS_Data::MetricType)((IMS_Data::MetricHistOp const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::IMS_Data::MetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  arg2 = (::IMS_Data::MetricType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_MetricHistOp_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::MetricHistOp *arg1 = (IMS_Data::MetricHistOp *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::MetricHistOp **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Process(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::Process *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::Process *)new IMS_Data::Process();
  *(IMS_Data::Process **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Process(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1getProcessName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::Process const *)arg1)->getProcessName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1setProcessName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setProcessName((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::Process const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1getDietId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::Process const *)arg1)->getDietId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1setDietId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDietId((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::IMS_Data::ProcessState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  result = (::IMS_Data::ProcessState)((IMS_Data::Process const *)arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::IMS_Data::ProcessState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  arg2 = (::IMS_Data::ProcessState)jarg2; 
  (arg1)->setState(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::Process const *)arg1)->getTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1setTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setTimestamp(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1getScript(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::Process const *)arg1)->getScript();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1setScript(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setScript((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Process_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::Process *arg1 = (IMS_Data::Process *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Process **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ProcessOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::ProcessOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::ProcessOp *)new IMS_Data::ProcessOp();
  *(IMS_Data::ProcessOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ProcessOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::ProcessOp const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ProcessOp_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ProcessOp *arg1 = (IMS_Data::ProcessOp *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ProcessOp **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1RestartOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::RestartOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::RestartOp *)new IMS_Data::RestartOp();
  *(IMS_Data::RestartOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1RestartOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1getVishnuConf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::RestartOp const *)arg1)->getVishnuConf();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1setVishnuConf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setVishnuConf((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1getSedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ::IMS_Data::SeDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  result = (::IMS_Data::SeDType)((IMS_Data::RestartOp const *)arg1)->getSedType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1setSedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ::IMS_Data::SeDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  arg2 = (::IMS_Data::SeDType)jarg2; 
  (arg1)->setSedType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RestartOp_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::RestartOp *arg1 = (IMS_Data::RestartOp *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::RestartOp **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1SysInfoOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::SysInfoOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::SysInfoOp *)new IMS_Data::SysInfoOp();
  *(IMS_Data::SysInfoOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1SysInfoOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::SysInfoOp const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SysInfoOp_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::SysInfoOp *arg1 = (IMS_Data::SysInfoOp *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SysInfoOp **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1SystemInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::SystemInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::SystemInfo *)new IMS_Data::SystemInfo();
  *(IMS_Data::SystemInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1SystemInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1getMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::SystemInfo const *)arg1)->getMemory();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1setMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setMemory(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1getDiskSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::SystemInfo const *)arg1)->getDiskSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1setDiskSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setDiskSpace(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::SystemInfo const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SystemInfo_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::SystemInfo *arg1 = (IMS_Data::SystemInfo *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::SystemInfo **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1Threshold(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::Threshold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::Threshold *)new IMS_Data::Threshold();
  *(IMS_Data::Threshold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1Threshold(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  result = (::ecore::ELong)((IMS_Data::Threshold const *)arg1)->getValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::Threshold const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::IMS_Data::MetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  result = (::IMS_Data::MetricType)((IMS_Data::Threshold const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::IMS_Data::MetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  arg2 = (::IMS_Data::MetricType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1getHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::Threshold const *)arg1)->getHandler();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1setHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setHandler((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_Threshold_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::Threshold *arg1 = (IMS_Data::Threshold *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::Threshold **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1ThresholdOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IMS_Data::ThresholdOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IMS_Data::ThresholdOp *)new IMS_Data::ThresholdOp();
  *(IMS_Data::ThresholdOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ThresholdOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1getMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  result = (ecore::EString *) &((IMS_Data::ThresholdOp const *)arg1)->getMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1setMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1getMetricType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ::IMS_Data::MetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  result = (::IMS_Data::MetricType)((IMS_Data::ThresholdOp const *)arg1)->getMetricType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1setMetricType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ::IMS_Data::MetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  arg2 = (::IMS_Data::MetricType)jarg2; 
  (arg1)->setMetricType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ThresholdOp_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IMS_Data::ThresholdOp *arg1 = (IMS_Data::ThresholdOp *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IMS_Data::ThresholdOp **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1CpFileOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::CpFileOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::CpFileOptions *)new FMS_Data::CpFileOptions();
  *(FMS_Data::CpFileOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1CpFileOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1isIsRecursive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  result = (::ecore::EBoolean)((FMS_Data::CpFileOptions const *)arg1)->isIsRecursive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1setIsRecursive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsRecursive(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1getTrCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::FMS_Data::TransferCommand result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  result = (::FMS_Data::TransferCommand)((FMS_Data::CpFileOptions const *)arg1)->getTrCommand();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1setTrCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::FMS_Data::TransferCommand arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  arg2 = (::FMS_Data::TransferCommand)jarg2; 
  (arg1)->setTrCommand(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_CpFileOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::CpFileOptions *arg1 = (FMS_Data::CpFileOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::CpFileOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1FileStat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::FileStat *)new FMS_Data::FileStat();
  *(FMS_Data::FileStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1FileStat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileStat const *)arg1)->getPath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPath((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileStat const *)arg1)->getOwner();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOwner((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileStat const *)arg1)->getGroup();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setGroup((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getPerms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::EInt)((FMS_Data::FileStat const *)arg1)->getPerms();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setPerms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setPerms(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileStat const *)arg1)->getUid();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setUid(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getGid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileStat const *)arg1)->getGid();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setGid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setGid(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileStat const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getAtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileStat const *)arg1)->getAtime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setAtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setAtime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getMtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileStat const *)arg1)->getMtime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setMtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setMtime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getCtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileStat const *)arg1)->getCtime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setCtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setCtime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::FMS_Data::FileType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::FMS_Data::FileType)((FMS_Data::FileStat const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::FMS_Data::FileType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::FMS_Data::FileType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStat_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStat *arg1 = (FMS_Data::FileStat *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStat **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1FileStatList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::FileStatList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::FileStatList *)new FMS_Data::FileStatList();
  *(FMS_Data::FileStatList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1FileStatList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStatList_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStatList_1getFileStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  ::ecorecpp::mapping::EList< ::FMS_Data::FileStat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) &(arg1)->getFileStats();
  *(::ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStatList_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStatList_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStatList_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStatList_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileStatList_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileStatList *arg1 = (FMS_Data::FileStatList *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileStatList **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1FileTransfer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::FileTransfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::FileTransfer *)new FMS_Data::FileTransfer();
  *(FMS_Data::FileTransfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1FileTransfer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getTransferId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getTransferId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setTransferId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setTransferId((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::FMS_Data::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (::FMS_Data::Status)((FMS_Data::FileTransfer const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::FMS_Data::Status arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::FMS_Data::Status)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getClientMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getClientMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setClientMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setClientMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getSourceMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getSourceMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setSourceMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSourceMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getDestinationMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getDestinationMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setDestinationMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDestinationMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getSourceFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getSourceFilePath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setSourceFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSourceFilePath((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getDestinationFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getDestinationFilePath();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setDestinationFilePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDestinationFilePath((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileTransfer const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getStart_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::ELong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (::ecore::ELong)((FMS_Data::FileTransfer const *)arg1)->getStart_time();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setStart_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::ELong arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::ecore::ELong)jarg2; 
  (arg1)->setStart_time(arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getTrCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::FMS_Data::TransferCommand result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (::FMS_Data::TransferCommand)((FMS_Data::FileTransfer const *)arg1)->getTrCommand();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setTrCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::FMS_Data::TransferCommand arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::FMS_Data::TransferCommand)jarg2; 
  (arg1)->setTrCommand(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1getErrorMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::FileTransfer const *)arg1)->getErrorMsg();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1setErrorMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setErrorMsg((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransfer_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileTransfer *arg1 = (FMS_Data::FileTransfer *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransfer **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1FileTransferList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::FileTransferList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::FileTransferList *)new FMS_Data::FileTransferList();
  *(FMS_Data::FileTransferList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1FileTransferList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransferList_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransferList_1getFileTransfers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  ::ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) &(arg1)->getFileTransfers();
  *(::ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransferList_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransferList_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransferList_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransferList_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_FileTransferList_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::FileTransferList *arg1 = (FMS_Data::FileTransferList *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::FileTransferList **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1HeadOfFileOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::HeadOfFileOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::HeadOfFileOptions *)new FMS_Data::HeadOfFileOptions();
  *(FMS_Data::HeadOfFileOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1HeadOfFileOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1getNline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  result = (::ecore::EInt)((FMS_Data::HeadOfFileOptions const *)arg1)->getNline();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1setNline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNline(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_HeadOfFileOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::HeadOfFileOptions *arg1 = (FMS_Data::HeadOfFileOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::HeadOfFileOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1LsDirOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::LsDirOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::LsDirOptions *)new FMS_Data::LsDirOptions();
  *(FMS_Data::LsDirOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1LsDirOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1isLongFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  result = (::ecore::EBoolean)((FMS_Data::LsDirOptions const *)arg1)->isLongFormat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1setLongFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLongFormat(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1isAllFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  result = (::ecore::EBoolean)((FMS_Data::LsDirOptions const *)arg1)->isAllFiles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1setAllFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAllFiles(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsDirOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::LsDirOptions *arg1 = (FMS_Data::LsDirOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsDirOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1LsTransferOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::LsTransferOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::LsTransferOptions *)new FMS_Data::LsTransferOptions();
  *(FMS_Data::LsTransferOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1LsTransferOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1getTransferId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::LsTransferOptions const *)arg1)->getTransferId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1setTransferId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setTransferId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1getFromMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::LsTransferOptions const *)arg1)->getFromMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1setFromMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFromMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::LsTransferOptions const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ::FMS_Data::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  result = (::FMS_Data::Status)((FMS_Data::LsTransferOptions const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ::FMS_Data::Status arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  arg2 = (::FMS_Data::Status)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_LsTransferOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::LsTransferOptions *arg1 = (FMS_Data::LsTransferOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::LsTransferOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1StopTransferOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::StopTransferOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::StopTransferOptions *)new FMS_Data::StopTransferOptions();
  *(FMS_Data::StopTransferOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1StopTransferOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1getTransferId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::StopTransferOptions const *)arg1)->getTransferId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1setTransferId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setTransferId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1getFromMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::StopTransferOptions const *)arg1)->getFromMachineId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1setFromMachineId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFromMachineId((ecore::EString const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ecore::EString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  result = (ecore::EString *) &((FMS_Data::StopTransferOptions const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1setUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUserId((ecore::EString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StopTransferOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::StopTransferOptions *arg1 = (FMS_Data::StopTransferOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StopTransferOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1StringList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::StringList *)new FMS_Data::StringList();
  *(FMS_Data::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1StringList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1getStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  std::vector< ::ecore::EString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  result = (std::vector< ::ecore::EString > *) &((FMS_Data::StringList const *)arg1)->getStrings();
  *(std::vector< ::ecore::EString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1setStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  std::vector< ::ecore::EString > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  arg2 = *(std::vector< ::ecore::EString > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ::ecore::EString > const & reference is null");
    return ;
  } 
  (arg1)->setStrings((std::vector< ::ecore::EString > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1addStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  ecore::EString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addStrings((ecore::EString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1setStringsAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  size_t arg2 ;
  ecore::EString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setStringsAt(arg2,(ecore::EString const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1deleteStringsAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->deleteStringsAt(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_StringList_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::StringList *arg1 = (FMS_Data::StringList *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::StringList **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1TailOfFileOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::TailOfFileOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::TailOfFileOptions *)new FMS_Data::TailOfFileOptions();
  *(FMS_Data::TailOfFileOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1TailOfFileOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1getNline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  ::ecore::EInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  result = (::ecore::EInt)((FMS_Data::TailOfFileOptions const *)arg1)->getNline();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1setNline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->setNline(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_TailOfFileOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::TailOfFileOptions *arg1 = (FMS_Data::TailOfFileOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::TailOfFileOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1RmFileOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMS_Data::RmFileOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMS_Data::RmFileOptions *)new FMS_Data::RmFileOptions();
  *(FMS_Data::RmFileOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1RmFileOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  (arg1)->_initialize();
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1isIsRecursive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  result = (::ecore::EBoolean)((FMS_Data::RmFileOptions const *)arg1)->isIsRecursive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1setIsRecursive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  ::ecore::EBoolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsRecursive(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1eGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean arg3 ;
  ::ecore::EJavaObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->eGet(arg2,arg3);
  *(::ecore::EJavaObject **)&jresult = new ::ecore::EJavaObject((const ::ecore::EJavaObject &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1eSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ecore::EJavaObject *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  arg3 = *(ecore::EJavaObject **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecore::EJavaObject const & reference is null");
    return ;
  } 
  (arg1)->eSet(arg2,(ecore::EJavaObject const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1eIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  ::ecore::EBoolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  result = (::ecore::EBoolean)(arg1)->eIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1eUnset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  ::ecore::EInt arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  arg2 = (::ecore::EInt)jarg2; 
  (arg1)->eUnset(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_RmFileOptions_1_1eClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMS_Data::RmFileOptions *arg1 = (FMS_Data::RmFileOptions *) 0 ;
  ::ecore::EClass_ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMS_Data::RmFileOptions **)&jarg1; 
  result = (::ecore::EClass_ptr)(arg1)->_eClass();
  *(::ecore::EClass_ptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1EListPtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *)new ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >();
  *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1EListPtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ecore::EObject > *arg1 = (ecorecpp::mapping::EList< ecore::EObject > *) 0 ;
  bool arg2 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ecore::EObject > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *)new ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >(arg1,arg2);
  *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1EListPtr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ecore::EObject > *arg1 = (ecorecpp::mapping::EList< ecore::EObject > *) 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ecore::EObject > **)&jarg1; 
  result = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *)new ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >(arg1);
  *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1EListPtr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > const & reference is null");
    return 0;
  } 
  result = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *)new ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >((ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > const &)*arg1);
  *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EListPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EListPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *) 0 ;
  ::ecorecpp::mapping::EList< ecore::EObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ecore::EObject > *)((ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > const *)arg1)->get();
  *(::ecorecpp::mapping::EList< ecore::EObject > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EListPtr_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *) 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >::element_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1; 
  result = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >::element_type *) &((ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > const *)arg1)->operator *();
  *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >::element_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EListPtr_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *) 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >::element_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1; 
  result = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >::element_type *)((ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > const *)arg1)->operator ->();
  *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > >::element_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EListPtr_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *) 0 ;
  ::ecorecpp::mapping::EList< ecore::EObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1; 
  result = (::ecorecpp::mapping::EList< ecore::EObject > *)(arg1)->release();
  *(::ecorecpp::mapping::EList< ecore::EObject > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EListPtr_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *) 0 ;
  ecorecpp::mapping::EList< ecore::EObject > *arg2 = (ecorecpp::mapping::EList< ecore::EObject > *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ecore::EObject > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->reset(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EListPtr_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *arg1 = (ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > *) 0 ;
  ecorecpp::mapping::EList< ecore::EObject > *arg2 = (ecorecpp::mapping::EList< ecore::EObject > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::out_ptr< ::ecorecpp::mapping::EList< ::ecore::EObject > > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ecore::EObject > **)&jarg2; 
  (arg1)->reset(arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESessionList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Session > *) 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::UMS_Data::Session > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESessionList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Session > *) 0 ;
  size_t arg2 ;
  UMS_Data::Session *arg3 = (UMS_Data::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(UMS_Data::Session **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESessionList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Session > *) 0 ;
  size_t arg2 ;
  ::UMS_Data::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::UMS_Data::Session *)((ecorecpp::mapping::EList< ::UMS_Data::Session > const *)arg1)->get(arg2);
  *(::UMS_Data::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESessionList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Session > *) 0 ;
  UMS_Data::Session *arg2 = (UMS_Data::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg1; 
  arg2 = *(UMS_Data::Session **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESessionList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Session > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::UMS_Data::Session > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESessionList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Session > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ESessionList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::UMS_Data::Session > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Session > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Session > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EUserList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::User > *) 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::UMS_Data::User > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EUserList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::User > *) 0 ;
  size_t arg2 ;
  UMS_Data::User *arg3 = (UMS_Data::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(UMS_Data::User **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EUserList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::User > *) 0 ;
  size_t arg2 ;
  ::UMS_Data::User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::UMS_Data::User *)((ecorecpp::mapping::EList< ::UMS_Data::User > const *)arg1)->get(arg2);
  *(::UMS_Data::User **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EUserList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::User > *) 0 ;
  UMS_Data::User *arg2 = (UMS_Data::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg1; 
  arg2 = *(UMS_Data::User **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EUserList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::User > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::UMS_Data::User > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EUserList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::User > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EUserList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::UMS_Data::User > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::User > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::User > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMachineList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Machine > *) 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::UMS_Data::Machine > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMachineList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Machine > *) 0 ;
  size_t arg2 ;
  UMS_Data::Machine *arg3 = (UMS_Data::Machine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(UMS_Data::Machine **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMachineList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Machine > *) 0 ;
  size_t arg2 ;
  ::UMS_Data::Machine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::UMS_Data::Machine *)((ecorecpp::mapping::EList< ::UMS_Data::Machine > const *)arg1)->get(arg2);
  *(::UMS_Data::Machine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMachineList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Machine > *) 0 ;
  UMS_Data::Machine *arg2 = (UMS_Data::Machine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg1; 
  arg2 = *(UMS_Data::Machine **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMachineList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Machine > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::UMS_Data::Machine > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMachineList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Machine > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EMachineList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::UMS_Data::Machine > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Machine > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Machine > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ELocalAccList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ELocalAccList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) 0 ;
  size_t arg2 ;
  UMS_Data::LocalAccount *arg3 = (UMS_Data::LocalAccount *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(UMS_Data::LocalAccount **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ELocalAccList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) 0 ;
  size_t arg2 ;
  ::UMS_Data::LocalAccount *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::UMS_Data::LocalAccount *)((ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > const *)arg1)->get(arg2);
  *(::UMS_Data::LocalAccount **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ELocalAccList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) 0 ;
  UMS_Data::LocalAccount *arg2 = (UMS_Data::LocalAccount *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg1; 
  arg2 = *(UMS_Data::LocalAccount **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ELocalAccList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ELocalAccList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ELocalAccList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::LocalAccount > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ECommandList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Command > *) 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::UMS_Data::Command > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ECommandList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Command > *) 0 ;
  size_t arg2 ;
  UMS_Data::Command *arg3 = (UMS_Data::Command *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(UMS_Data::Command **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ECommandList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Command > *) 0 ;
  size_t arg2 ;
  ::UMS_Data::Command *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::UMS_Data::Command *)((ecorecpp::mapping::EList< ::UMS_Data::Command > const *)arg1)->get(arg2);
  *(::UMS_Data::Command **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ECommandList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Command > *) 0 ;
  UMS_Data::Command *arg2 = (UMS_Data::Command *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg1; 
  arg2 = *(UMS_Data::Command **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ECommandList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Command > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::UMS_Data::Command > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ECommandList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Command > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ECommandList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::UMS_Data::Command > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::Command > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::Command > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EOptionList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::UMS_Data::OptionValue > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EOptionList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) 0 ;
  size_t arg2 ;
  UMS_Data::OptionValue *arg3 = (UMS_Data::OptionValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(UMS_Data::OptionValue **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EOptionList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) 0 ;
  size_t arg2 ;
  ::UMS_Data::OptionValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::UMS_Data::OptionValue *)((ecorecpp::mapping::EList< ::UMS_Data::OptionValue > const *)arg1)->get(arg2);
  *(::UMS_Data::OptionValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EOptionList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) 0 ;
  UMS_Data::OptionValue *arg2 = (UMS_Data::OptionValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg1; 
  arg2 = *(UMS_Data::OptionValue **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EOptionList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::UMS_Data::OptionValue > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EOptionList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EOptionList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *arg1 = (ecorecpp::mapping::EList< ::UMS_Data::OptionValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::UMS_Data::OptionValue > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Job > *) 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::TMS_Data::Job > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Job > *) 0 ;
  size_t arg2 ;
  TMS_Data::Job *arg3 = (TMS_Data::Job *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(TMS_Data::Job **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Job > *) 0 ;
  size_t arg2 ;
  ::TMS_Data::Job *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::TMS_Data::Job *)((ecorecpp::mapping::EList< ::TMS_Data::Job > const *)arg1)->get(arg2);
  *(::TMS_Data::Job **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Job > *) 0 ;
  TMS_Data::Job *arg2 = (TMS_Data::Job *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg1; 
  arg2 = *(TMS_Data::Job **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Job > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::TMS_Data::Job > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Job > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EJobList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::TMS_Data::Job > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Job > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Job > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProgressionList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Progression > *) 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::TMS_Data::Progression > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProgressionList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Progression > *) 0 ;
  size_t arg2 ;
  TMS_Data::Progression *arg3 = (TMS_Data::Progression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(TMS_Data::Progression **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProgressionList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Progression > *) 0 ;
  size_t arg2 ;
  ::TMS_Data::Progression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::TMS_Data::Progression *)((ecorecpp::mapping::EList< ::TMS_Data::Progression > const *)arg1)->get(arg2);
  *(::TMS_Data::Progression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProgressionList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Progression > *) 0 ;
  TMS_Data::Progression *arg2 = (TMS_Data::Progression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg1; 
  arg2 = *(TMS_Data::Progression **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProgressionList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Progression > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::TMS_Data::Progression > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProgressionList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Progression > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EProgressionList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::TMS_Data::Progression > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Progression > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Progression > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EQueueList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Queue > *) 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::TMS_Data::Queue > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EQueueList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Queue > *) 0 ;
  size_t arg2 ;
  TMS_Data::Queue *arg3 = (TMS_Data::Queue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(TMS_Data::Queue **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EQueueList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Queue > *) 0 ;
  size_t arg2 ;
  ::TMS_Data::Queue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::TMS_Data::Queue *)((ecorecpp::mapping::EList< ::TMS_Data::Queue > const *)arg1)->get(arg2);
  *(::TMS_Data::Queue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EQueueList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Queue > *) 0 ;
  TMS_Data::Queue *arg2 = (TMS_Data::Queue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg1; 
  arg2 = *(TMS_Data::Queue **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EQueueList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Queue > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::TMS_Data::Queue > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EQueueList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Queue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EQueueList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::TMS_Data::Queue > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::Queue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::Queue > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobResultList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::TMS_Data::JobResult > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobResultList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) 0 ;
  size_t arg2 ;
  TMS_Data::JobResult *arg3 = (TMS_Data::JobResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(TMS_Data::JobResult **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobResultList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) 0 ;
  size_t arg2 ;
  ::TMS_Data::JobResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::TMS_Data::JobResult *)((ecorecpp::mapping::EList< ::TMS_Data::JobResult > const *)arg1)->get(arg2);
  *(::TMS_Data::JobResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobResultList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) 0 ;
  TMS_Data::JobResult *arg2 = (TMS_Data::JobResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg1; 
  arg2 = *(TMS_Data::JobResult **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobResultList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::TMS_Data::JobResult > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EJobResultList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EJobResultList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::TMS_Data::JobResult > *arg1 = (ecorecpp::mapping::EList< ::TMS_Data::JobResult > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::TMS_Data::JobResult > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMetricList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Metric > *) 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::IMS_Data::Metric > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMetricList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Metric > *) 0 ;
  size_t arg2 ;
  IMS_Data::Metric *arg3 = (IMS_Data::Metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(IMS_Data::Metric **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMetricList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Metric > *) 0 ;
  size_t arg2 ;
  ::IMS_Data::Metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::IMS_Data::Metric *)((ecorecpp::mapping::EList< ::IMS_Data::Metric > const *)arg1)->get(arg2);
  *(::IMS_Data::Metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMetricList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Metric > *) 0 ;
  IMS_Data::Metric *arg2 = (IMS_Data::Metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg1; 
  arg2 = *(IMS_Data::Metric **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMetricList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Metric > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::IMS_Data::Metric > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EMetricList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EMetricList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::IMS_Data::Metric > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Metric > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProcessesList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Process > *) 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::IMS_Data::Process > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProcessesList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Process > *) 0 ;
  size_t arg2 ;
  IMS_Data::Process *arg3 = (IMS_Data::Process *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(IMS_Data::Process **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProcessesList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Process > *) 0 ;
  size_t arg2 ;
  ::IMS_Data::Process *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::IMS_Data::Process *)((ecorecpp::mapping::EList< ::IMS_Data::Process > const *)arg1)->get(arg2);
  *(::IMS_Data::Process **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProcessesList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Process > *) 0 ;
  IMS_Data::Process *arg2 = (IMS_Data::Process *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg1; 
  arg2 = *(IMS_Data::Process **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProcessesList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Process > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::IMS_Data::Process > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EProcessesList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Process > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EProcessesList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::IMS_Data::Process > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Process > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Process > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESysInfoList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESysInfoList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) 0 ;
  size_t arg2 ;
  IMS_Data::SystemInfo *arg3 = (IMS_Data::SystemInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(IMS_Data::SystemInfo **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESysInfoList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) 0 ;
  size_t arg2 ;
  ::IMS_Data::SystemInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::IMS_Data::SystemInfo *)((ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > const *)arg1)->get(arg2);
  *(::IMS_Data::SystemInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESysInfoList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) 0 ;
  IMS_Data::SystemInfo *arg2 = (IMS_Data::SystemInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg1; 
  arg2 = *(IMS_Data::SystemInfo **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESysInfoList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_ESysInfoList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1ESysInfoList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::SystemInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EThresholdList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::IMS_Data::Threshold > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EThresholdList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) 0 ;
  size_t arg2 ;
  IMS_Data::Threshold *arg3 = (IMS_Data::Threshold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(IMS_Data::Threshold **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EThresholdList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) 0 ;
  size_t arg2 ;
  ::IMS_Data::Threshold *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::IMS_Data::Threshold *)((ecorecpp::mapping::EList< ::IMS_Data::Threshold > const *)arg1)->get(arg2);
  *(::IMS_Data::Threshold **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EThresholdList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) 0 ;
  IMS_Data::Threshold *arg2 = (IMS_Data::Threshold *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg1; 
  arg2 = *(IMS_Data::Threshold **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EThresholdList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::IMS_Data::Threshold > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EThresholdList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EThresholdList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::IMS_Data::Threshold > *arg1 = (ecorecpp::mapping::EList< ::IMS_Data::Threshold > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::IMS_Data::Threshold > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileTransferList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) 0 ;
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileTransferList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) 0 ;
  size_t arg2 ;
  FMS_Data::FileTransfer *arg3 = (FMS_Data::FileTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(FMS_Data::FileTransfer **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileTransferList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) 0 ;
  size_t arg2 ;
  ::FMS_Data::FileTransfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::FMS_Data::FileTransfer *)((ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > const *)arg1)->get(arg2);
  *(::FMS_Data::FileTransfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileTransferList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) 0 ;
  FMS_Data::FileTransfer *arg2 = (FMS_Data::FileTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg1; 
  arg2 = *(FMS_Data::FileTransfer **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileTransferList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileTransferList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EFileTransferList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileTransfer > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileStatList_1insert_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) 0 ;
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg1; 
  arg2 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ecorecpp::mapping::EList< ::FMS_Data::FileStat > & reference is null");
    return ;
  } 
  (arg1)->insert_all(*arg2);
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileStatList_1insert_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) 0 ;
  size_t arg2 ;
  FMS_Data::FileStat *arg3 = (FMS_Data::FileStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(FMS_Data::FileStat **)&jarg3; 
  (arg1)->insert_at(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileStatList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) 0 ;
  size_t arg2 ;
  ::FMS_Data::FileStat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (::FMS_Data::FileStat *)((ecorecpp::mapping::EList< ::FMS_Data::FileStat > const *)arg1)->get(arg2);
  *(::FMS_Data::FileStat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileStatList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) 0 ;
  FMS_Data::FileStat *arg2 = (FMS_Data::FileStat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg1; 
  arg2 = *(FMS_Data::FileStat **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileStatList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg1; 
  result = ((ecorecpp::mapping::EList< ::FMS_Data::FileStat > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EFileStatList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EFileStatList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ecorecpp::mapping::EList< ::FMS_Data::FileStat > *arg1 = (ecorecpp::mapping::EList< ::FMS_Data::FileStat > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ecorecpp::mapping::EList< ::FMS_Data::FileStat > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1EStringList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ::ecore::EString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ::ecore::EString > *)new std::vector< ::ecore::EString >();
  *(std::vector< ::ecore::EString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_new_1EStringList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< ::ecore::EString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< ::ecore::EString > *)new std::vector< ::ecore::EString >(arg1);
  *(std::vector< ::ecore::EString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  result = ((std::vector< ::ecore::EString > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  result = ((std::vector< ::ecore::EString > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  result = (bool)((std::vector< ::ecore::EString > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl__ecore_EString_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_EStringList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl__ecore_EString_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_delete_1EStringList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ::ecore::EString > *arg1 = (std::vector< ::ecore::EString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ::ecore::EString > **)&jarg1; 
  {
    delete arg1; 
  }
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_connect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  UMS_Data::Session *arg3 = 0 ;
  UMS_Data::ConnectOptions *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(UMS_Data::Session **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::Session & reference is null");
    return 0;
  } 
  arg4 = *(UMS_Data::ConnectOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ConnectOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::connect((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(UMS_Data::ConnectOptions const &)*arg4);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_connect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  UMS_Data::Session *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(UMS_Data::Session **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::Session & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::connect((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_reconnect(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  UMS_Data::Session *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(UMS_Data::Session **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::Session & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::reconnect((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_close(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (int)vishnu::close((std::string const &)*arg1);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_addUser(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::User *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::User **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::User & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::addUser((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_updateUser(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::User *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::User **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::User const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::updateUser((std::string const &)*arg1,(UMS_Data::User const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_deleteUser(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::deleteUser((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_changePassword(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::changePassword((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_resetPassword(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string strTemp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    
    jobject oInput = jenv->GetObjectArrayElement(jarg3, 0);
    if ( NULL != oInput ) {
      jstring sInput = static_cast<jstring>( oInput );
      
      const char * arg3_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0);
      if (!arg3_pstr) return 0;
      strTemp3.assign( arg3_pstr );
      jenv->ReleaseStringUTFChars( sInput, arg3_pstr);
    }
    
    arg3 = &strTemp3;
  }
  {
    try {
      result = (int)vishnu::resetPassword((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jstring jStrTemp = jenv->NewStringUTF( strTemp3.c_str() );
    jenv->SetObjectArrayElement(jarg3, 0, jStrTemp);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_addMachine(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::Machine *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::Machine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::Machine & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::addMachine((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_updateMachine(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::Machine *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::Machine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::Machine const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::updateMachine((std::string const &)*arg1,(UMS_Data::Machine const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_deleteMachine(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::deleteMachine((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_addLocalAccount(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::LocalAccount *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string strTemp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::LocalAccount **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::LocalAccount const & reference is null");
    return 0;
  } 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    
    jobject oInput = jenv->GetObjectArrayElement(jarg3, 0);
    if ( NULL != oInput ) {
      jstring sInput = static_cast<jstring>( oInput );
      
      const char * arg3_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0);
      if (!arg3_pstr) return 0;
      strTemp3.assign( arg3_pstr );
      jenv->ReleaseStringUTFChars( sInput, arg3_pstr);
    }
    
    arg3 = &strTemp3;
  }
  {
    try {
      result = (int)vishnu::addLocalAccount((std::string const &)*arg1,(UMS_Data::LocalAccount const &)*arg2,*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jstring jStrTemp = jenv->NewStringUTF( strTemp3.c_str() );
    jenv->SetObjectArrayElement(jarg3, 0, jStrTemp);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_updateLocalAccount(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::LocalAccount *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::LocalAccount **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::LocalAccount const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::updateLocalAccount((std::string const &)*arg1,(UMS_Data::LocalAccount const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_deleteLocalAccount(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::deleteLocalAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_saveConfiguration(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::Configuration *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::Configuration & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::saveConfiguration((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_restoreConfiguration(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::restoreConfiguration((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_configureOption(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::OptionValue *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::OptionValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::OptionValue const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::configureOption((std::string const &)*arg1,(UMS_Data::OptionValue const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_configureDefaultOption(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::OptionValue *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::OptionValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::OptionValue const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::configureDefaultOption((std::string const &)*arg1,(UMS_Data::OptionValue const &)*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listSessions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListSessions *arg2 = 0 ;
  UMS_Data::ListSessionOptions *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListSessions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListSessions & reference is null");
    return 0;
  } 
  arg3 = *(UMS_Data::ListSessionOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListSessionOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listSessions((std::string const &)*arg1,*arg2,(UMS_Data::ListSessionOptions const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listSessions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListSessions *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListSessions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListSessions & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listSessions((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listLocalAccount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListLocalAccounts *arg2 = 0 ;
  UMS_Data::ListLocalAccOptions *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListLocalAccounts **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListLocalAccounts & reference is null");
    return 0;
  } 
  arg3 = *(UMS_Data::ListLocalAccOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListLocalAccOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listLocalAccount((std::string const &)*arg1,*arg2,(UMS_Data::ListLocalAccOptions const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listLocalAccount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListLocalAccounts *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListLocalAccounts **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListLocalAccounts & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listLocalAccount((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listMachine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListMachines *arg2 = 0 ;
  UMS_Data::ListMachineOptions *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListMachines **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListMachines & reference is null");
    return 0;
  } 
  arg3 = *(UMS_Data::ListMachineOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListMachineOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listMachine((std::string const &)*arg1,*arg2,(UMS_Data::ListMachineOptions const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listMachine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListMachines *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListMachines **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListMachines & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listMachine((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listHistoryCmd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListCommands *arg2 = 0 ;
  UMS_Data::ListCmdOptions *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListCommands **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListCommands & reference is null");
    return 0;
  } 
  arg3 = *(UMS_Data::ListCmdOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListCmdOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listHistoryCmd((std::string const &)*arg1,*arg2,(UMS_Data::ListCmdOptions const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listHistoryCmd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListCommands *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListCommands **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListCommands & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listHistoryCmd((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listOptions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListOptionsValues *arg2 = 0 ;
  UMS_Data::ListOptOptions *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListOptionsValues **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListOptionsValues & reference is null");
    return 0;
  } 
  arg3 = *(UMS_Data::ListOptOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListOptOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listOptions((std::string const &)*arg1,*arg2,(UMS_Data::ListOptOptions const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listOptions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListOptionsValues *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListOptionsValues **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListOptionsValues & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listOptions((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listUsers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListUsers *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListUsers **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListUsers & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::listUsers((std::string const &)*arg1,*arg2,(std::string const &)*arg3);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listUsers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  UMS_Data::ListUsers *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(UMS_Data::ListUsers **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UMS_Data::ListUsers & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listUsers((std::string const &)*arg1,*arg2);
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalUMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_vishnuInitialize(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    arg2 = 0;
  }
  {
    arg3 = NULL;
  }
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    result = (int)vishnu::vishnuInitialize(arg1,arg2,arg3); 
  }
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_vishnuFinalize(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    vishnu::vishnuFinalize(); 
  }
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_submitJob_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  TMS_Data::Job *arg4 = 0 ;
  TMS_Data::SubmitOptions *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(TMS_Data::Job **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::Job & reference is null");
    return 0;
  } 
  arg5 = *(TMS_Data::SubmitOptions **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::SubmitOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::submitJob((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4,(TMS_Data::SubmitOptions const &)*arg5);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_submitJob_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  TMS_Data::Job *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(TMS_Data::Job **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::Job & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::submitJob((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_cancelJob(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::cancelJob((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getJobInfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  TMS_Data::Job *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(TMS_Data::Job **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::Job & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::getJobInfo((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listJobs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListJobs *arg3 = 0 ;
  TMS_Data::ListJobsOptions *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListJobs **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListJobs & reference is null");
    return 0;
  } 
  arg4 = *(TMS_Data::ListJobsOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListJobsOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listJobs((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(TMS_Data::ListJobsOptions const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listJobs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListJobs *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListJobs **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListJobs & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listJobs((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getJobProgress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListProgression *arg3 = 0 ;
  TMS_Data::ProgressOptions *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListProgression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListProgression & reference is null");
    return 0;
  } 
  arg4 = *(TMS_Data::ProgressOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ProgressOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::getJobProgress((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(TMS_Data::ProgressOptions const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getJobProgress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListProgression *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListProgression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListProgression & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::getJobProgress((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listQueues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListQueues *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListQueues **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListQueues & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (int)vishnu::listQueues((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(std::string const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listQueues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListQueues *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListQueues **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListQueues & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listQueues((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getJobOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  TMS_Data::JobResult *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(TMS_Data::JobResult **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::JobResult & reference is null");
    return 0;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (int)vishnu::getJobOutput((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getJobOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  TMS_Data::JobResult *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(TMS_Data::JobResult **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::JobResult & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::getJobOutput((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getCompletedJobsOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListJobResults *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListJobResults **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListJobResults & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (int)vishnu::getCompletedJobsOutput((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(std::string const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getCompletedJobsOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  TMS_Data::ListJobResults *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(TMS_Data::ListJobResults **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TMS_Data::ListJobResults & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::getCompletedJobsOutput((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(TMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalTMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_exportCommands(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  IMS_Data::ExportOp arg4 ;
  IMS_Data::ExportOp *argp4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(IMS_Data::ExportOp **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::ExportOp");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (int)vishnu::exportCommands(arg1,arg2,arg3,arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getMetricCurrentValue(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  IMS_Data::ListMetric *arg3 = 0 ;
  IMS_Data::CurMetricOp arg4 ;
  IMS_Data::CurMetricOp *argp4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(IMS_Data::ListMetric **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMS_Data::ListMetric & reference is null");
    return 0;
  } 
  argp4 = *(IMS_Data::CurMetricOp **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::CurMetricOp");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (int)vishnu::getMetricCurrentValue(arg1,arg2,*arg3,arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getMetricHistory(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  IMS_Data::ListMetric *arg3 = 0 ;
  IMS_Data::MetricHistOp arg4 ;
  IMS_Data::MetricHistOp *argp4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(IMS_Data::ListMetric **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMS_Data::ListMetric & reference is null");
    return 0;
  } 
  argp4 = *(IMS_Data::MetricHistOp **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::MetricHistOp");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (int)vishnu::getMetricHistory(arg1,arg2,*arg3,arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getProcesses(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string arg1 ;
  IMS_Data::ListProcesses *arg2 = 0 ;
  IMS_Data::ProcessOp arg3 ;
  IMS_Data::ProcessOp *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(IMS_Data::ListProcesses **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMS_Data::ListProcesses & reference is null");
    return 0;
  } 
  argp3 = *(IMS_Data::ProcessOp **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::ProcessOp");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (int)vishnu::getProcesses(arg1,*arg2,arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_setSystemInfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string arg1 ;
  IMS_Data::SystemInfo arg2 ;
  IMS_Data::SystemInfo *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(IMS_Data::SystemInfo **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::SystemInfo");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (int)vishnu::setSystemInfo(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_setSystemThreshold(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string arg1 ;
  IMS_Data::Threshold arg2 ;
  IMS_Data::Threshold *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(IMS_Data::Threshold **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::Threshold");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (int)vishnu::setSystemThreshold(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getSystemThreshold(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string arg1 ;
  IMS_Data::ListThreshold *arg2 = 0 ;
  IMS_Data::ThresholdOp arg3 ;
  IMS_Data::ThresholdOp *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(IMS_Data::ListThreshold **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMS_Data::ListThreshold & reference is null");
    return 0;
  } 
  argp3 = *(IMS_Data::ThresholdOp **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::ThresholdOp");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (int)vishnu::getSystemThreshold(arg1,*arg2,arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_defineUserIdentifier(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::defineUserIdentifier(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_defineMachineIdentifier(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::defineMachineIdentifier(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_defineJobIdentifier(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::defineJobIdentifier(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_defineTransferIdentifier(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::defineTransferIdentifier(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_loadShed(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  IMS_Data::LoadShedType arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (IMS_Data::LoadShedType)jarg3; 
  {
    try {
      result = (int)vishnu::loadShed(arg1,arg2,arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_setUpdateFrequency(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)vishnu::setUpdateFrequency(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getUpdateFrequency(JNIEnv *jenv, jclass jcls, jstring jarg1, jintArray jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg2 = &temp2; 
  }
  {
    try {
      result = (int)vishnu::getUpdateFrequency(arg1,*arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_stop(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string arg1 ;
  IMS_Data::Process arg2 ;
  IMS_Data::Process *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  argp2 = *(IMS_Data::Process **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::Process");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (int)vishnu::stop(arg1,arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getSystemInfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string arg1 ;
  IMS_Data::ListSysInfo *arg2 = 0 ;
  IMS_Data::SysInfoOp arg3 ;
  IMS_Data::SysInfoOp *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(IMS_Data::ListSysInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IMS_Data::ListSysInfo & reference is null");
    return 0;
  } 
  argp3 = *(IMS_Data::SysInfoOp **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::SysInfoOp");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (int)vishnu::getSystemInfo(arg1,*arg2,arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_restart(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  IMS_Data::RestartOp arg3 ;
  IMS_Data::RestartOp *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(IMS_Data::RestartOp **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null IMS_Data::RestartOp");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (int)vishnu::restart(arg1,arg2,arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(IMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalIMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_createFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::createFile((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_chGrp(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::chGrp((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_chMod(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  mode_t *arg2 = 0 ;
  std::string *arg3 = 0 ;
  mode_t temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  temp2 = (mode_t)jarg2; 
  arg2 = &temp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::chMod((std::string const &)*arg1,(unsigned int const &)*arg2,(std::string const &)*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_copyFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::CpFileOptions *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(FMS_Data::CpFileOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::CpFileOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::copyFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(FMS_Data::CpFileOptions const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_copyFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::copyFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_copyAsyncFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::FileTransfer *arg4 = 0 ;
  FMS_Data::CpFileOptions *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(FMS_Data::FileTransfer **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::FileTransfer & reference is null");
    return 0;
  } 
  arg5 = *(FMS_Data::CpFileOptions **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::CpFileOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::copyAsyncFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4,(FMS_Data::CpFileOptions const &)*arg5);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_copyAsyncFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::FileTransfer *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(FMS_Data::FileTransfer **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::FileTransfer & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::copyAsyncFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_headOfFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobjectArray jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::HeadOfFileOptions *arg4 = 0 ;
  std::string strTemp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    
    jobject oInput = jenv->GetObjectArrayElement(jarg3, 0);
    if ( NULL != oInput ) {
      jstring sInput = static_cast<jstring>( oInput );
      
      const char * arg3_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0);
      if (!arg3_pstr) return 0;
      strTemp3.assign( arg3_pstr );
      jenv->ReleaseStringUTFChars( sInput, arg3_pstr);
    }
    
    arg3 = &strTemp3;
  }
  arg4 = *(FMS_Data::HeadOfFileOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::HeadOfFileOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::headOfFile((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(FMS_Data::HeadOfFileOptions const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jstring jStrTemp = jenv->NewStringUTF( strTemp3.c_str() );
    jenv->SetObjectArrayElement(jarg3, 0, jStrTemp);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_headOfFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string strTemp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    
    jobject oInput = jenv->GetObjectArrayElement(jarg3, 0);
    if ( NULL != oInput ) {
      jstring sInput = static_cast<jstring>( oInput );
      
      const char * arg3_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0);
      if (!arg3_pstr) return 0;
      strTemp3.assign( arg3_pstr );
      jenv->ReleaseStringUTFChars( sInput, arg3_pstr);
    }
    
    arg3 = &strTemp3;
  }
  {
    try {
      result = (int)vishnu::headOfFile((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jstring jStrTemp = jenv->NewStringUTF( strTemp3.c_str() );
    jenv->SetObjectArrayElement(jarg3, 0, jStrTemp);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_contentOfFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string strTemp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    
    jobject oInput = jenv->GetObjectArrayElement(jarg3, 0);
    if ( NULL != oInput ) {
      jstring sInput = static_cast<jstring>( oInput );
      
      const char * arg3_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0);
      if (!arg3_pstr) return 0;
      strTemp3.assign( arg3_pstr );
      jenv->ReleaseStringUTFChars( sInput, arg3_pstr);
    }
    
    arg3 = &strTemp3;
  }
  {
    try {
      result = (int)vishnu::contentOfFile((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jstring jStrTemp = jenv->NewStringUTF( strTemp3.c_str() );
    jenv->SetObjectArrayElement(jarg3, 0, jStrTemp);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listDir_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  FMS_Data::StringList *arg3 = 0 ;
  FMS_Data::LsDirOptions *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(FMS_Data::StringList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::StringList & reference is null");
    return 0;
  } 
  arg4 = *(FMS_Data::LsDirOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::LsDirOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listDir((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(FMS_Data::LsDirOptions const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listDir_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  FMS_Data::StringList *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(FMS_Data::StringList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::StringList & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listDir((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_createDir(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::createDir((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_moveFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::CpFileOptions *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(FMS_Data::CpFileOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::CpFileOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::moveFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(FMS_Data::CpFileOptions const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_moveFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (int)vishnu::moveFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_moveAsyncFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::FileTransfer *arg4 = 0 ;
  FMS_Data::CpFileOptions *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(FMS_Data::FileTransfer **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::FileTransfer & reference is null");
    return 0;
  } 
  arg5 = *(FMS_Data::CpFileOptions **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::CpFileOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::moveAsyncFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4,(FMS_Data::CpFileOptions const &)*arg5);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_moveAsyncFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::FileTransfer *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(FMS_Data::FileTransfer **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::FileTransfer & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::moveAsyncFile((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_removeFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  FMS_Data::RmFileOptions *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(FMS_Data::RmFileOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::RmFileOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::removeFile((std::string const &)*arg1,(std::string const &)*arg2,(FMS_Data::RmFileOptions const &)*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_removeFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::removeFile((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_removeDir(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)vishnu::removeDir((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_tailOfFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobjectArray jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FMS_Data::TailOfFileOptions *arg4 = 0 ;
  std::string strTemp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    
    jobject oInput = jenv->GetObjectArrayElement(jarg3, 0);
    if ( NULL != oInput ) {
      jstring sInput = static_cast<jstring>( oInput );
      
      const char * arg3_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0);
      if (!arg3_pstr) return 0;
      strTemp3.assign( arg3_pstr );
      jenv->ReleaseStringUTFChars( sInput, arg3_pstr);
    }
    
    arg3 = &strTemp3;
  }
  arg4 = *(FMS_Data::TailOfFileOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::TailOfFileOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::tailOfFile((std::string const &)*arg1,(std::string const &)*arg2,*arg3,(FMS_Data::TailOfFileOptions const &)*arg4);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jstring jStrTemp = jenv->NewStringUTF( strTemp3.c_str() );
    jenv->SetObjectArrayElement(jarg3, 0, jStrTemp);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_tailOfFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string strTemp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    
    jobject oInput = jenv->GetObjectArrayElement(jarg3, 0);
    if ( NULL != oInput ) {
      jstring sInput = static_cast<jstring>( oInput );
      
      const char * arg3_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0);
      if (!arg3_pstr) return 0;
      strTemp3.assign( arg3_pstr );
      jenv->ReleaseStringUTFChars( sInput, arg3_pstr);
    }
    
    arg3 = &strTemp3;
  }
  {
    try {
      result = (int)vishnu::tailOfFile((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  {
    jstring jStrTemp = jenv->NewStringUTF( strTemp3.c_str() );
    jenv->SetObjectArrayElement(jarg3, 0, jStrTemp);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_getFilesInfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  FMS_Data::FileStat *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(FMS_Data::FileStat **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::FileStat & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::getFilesInfo((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_stopFileTransfer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  FMS_Data::StopTransferOptions *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(FMS_Data::StopTransferOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::StopTransferOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::stopFileTransfer((std::string const &)*arg1,(FMS_Data::StopTransferOptions const &)*arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_stopFileTransfer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (int)vishnu::stopFileTransfer((std::string const &)*arg1);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listFileTransfers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  FMS_Data::FileTransferList *arg2 = 0 ;
  FMS_Data::LsTransferOptions *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(FMS_Data::FileTransferList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::FileTransferList & reference is null");
    return 0;
  } 
  arg3 = *(FMS_Data::LsTransferOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::LsTransferOptions const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listFileTransfers((std::string const &)*arg1,*arg2,(FMS_Data::LsTransferOptions const &)*arg3);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_listFileTransfers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  FMS_Data::FileTransferList *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(FMS_Data::FileTransferList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FMS_Data::FileTransferList & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)vishnu::listFileTransfers((std::string const &)*arg1,*arg2);
    }
    catch(UMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(FMSVishnuException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(UserException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
    catch(SystemException &_e) {
      {
        jclass clazz = jenv->FindClass("com/sysfera/vishnu/api/vishnu/internal/InternalFMSException");
        std::string ret = (&_e)->buildExceptionString() + "#" + (&_e)->getMsg();
        if (clazz) {
          jenv->ThrowNew(clazz, ret.c_str());
        }
        return 0;
      }
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGConnectOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ConnectOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGSessionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::Session **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListSessionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListSessions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListSessionOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListSessionOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGUserUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::User **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListUsersUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListUsers **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGCommandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::Command **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListCommandsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListCommands **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListCmdOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListCmdOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGLocalAccountUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::LocalAccount **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListLocalAccountsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListLocalAccounts **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListLocalAccOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListLocalAccOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGMachineUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::Machine **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListMachinesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListMachines **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListMachineOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListMachineOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGConfigurationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::Configuration **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGOptionValueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::OptionValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListOptionsValuesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListOptionsValues **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListOptOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(UMS_Data::ListOptOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGJobUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::Job **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGJobResultUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::JobResult **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListJobResultsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::ListJobResults **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListJobsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::ListJobs **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListJobsOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::ListJobsOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListProgressionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::ListProgression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListQueuesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::ListQueues **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGProgressOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::ProgressOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGProgressionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::Progression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGQueueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::Queue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGSubmitOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(TMS_Data::SubmitOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGExportOpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::ExportOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGCurMetricOpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::CurMetricOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGMetricUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::Metric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListMetricUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::ListMetric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListProcessesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::ListProcesses **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListSysInfoUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::ListSysInfo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGListThresholdUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::ListThreshold **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGMetricHistOpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::MetricHistOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGProcessUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::Process **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGProcessOpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::ProcessOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGRestartOpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::RestartOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGSysInfoOpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::SysInfoOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGSystemInfoUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::SystemInfo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGThresholdUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::Threshold **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGThresholdOpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(IMS_Data::ThresholdOp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGCpFileOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::CpFileOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGFileStatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::FileStat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGFileStatListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::FileStatList **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGFileTransferUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::FileTransfer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGFileTransferListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::FileTransferList **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGHeadOfFileOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::HeadOfFileOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGLsDirOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::LsDirOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGLsTransferOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::LsTransferOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGStopTransferOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::StopTransferOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGStringListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::StringList **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGTailOfFileOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::TailOfFileOptions **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_sysfera_vishnu_api_vishnu_internal_VISHNUJNI_SWIGRmFileOptionsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ecore::EObject **)&baseptr = *(FMS_Data::RmFileOptions **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

