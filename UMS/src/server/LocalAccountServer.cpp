/**
* \file LocalAccountServer.cpp
* \brief This file implements the Class which manipulates VISHNU localAccount data on server side.
* \author Eugène PAMBA CAPO-CHICHI (eugene.capochichi@sysfera.com)
* \date 31/01/2011
*/

#include "LocalAccountServer.hpp"

/**
* \brief Constructor
* \fn LocalAccountServer(LocalAccount account, SessionServer session)
* \param account The LocalAccount data structure
* \param session The object which encapsulates session data
*/
LocalAccountServer::LocalAccountServer(UMS_Data::LocalAccount*& account, SessionServer& session):
mlocalAccount(account), msessionServer(session) {
  DbFactory factory;
  mdatabaseVishnu = factory.getDatabaseInstance();
}

/**
* \brief Function to add a new VISHNU localAccount
* \fn int add() 
* \return the content of the public ssh key generated
*/
int
LocalAccountServer::add() {
  
  //int ret;
  std::string numMachine;
  std::string numUser;
  std::string sqlInsert = "insert into account (machine_nummachineid, users_numuserid, \
  aclogin, sshpathkey, home) values ";
  /*std::string cmd = "ssh-keygen -t rsa -N \"\" -f ";
  std::string keypath = std::string(getenv("HOME"))+"/.ssh/";
  int length;
  std::string publicKeyPath;
  char *publicKeyContent;*/

  try {
    //Creation of the object user
    UserServer userServer = UserServer(msessionServer);
    userServer.init();
    
    //Creation of the object machine
    UMS_Data::Machine *machine = new UMS_Data::Machine();
    machine->setMachineId(mlocalAccount->getMachineId());
    MachineServer machineServer = MachineServer(machine);
    
    //if the user exists 
    if (userServer.exist()) {
      //if the session key is for the owner of the local account or the user is an admin
      if (userServer.getData().getUserId().compare(mlocalAccount->getUserId()) == 0 ||
	userServer.isAdmin()){
  
	//if the machine exists and it is not locked
	if (machineServer.getAttribut("where machineid='"+mlocalAccount->getMachineId()+"'\
	  and status=1").size() != 0) {  
	  
	  //To get the database number id of the machine
	  numMachine = machineServer.getAttribut("where machineid='"+mlocalAccount->getMachineId()+"'");
	  //To get the database number id of the user
	  numUser = userServer.getAttribut("where userid='"+mlocalAccount->getUserId()+"'");
	
	  //if the local account does not exist
	  if (!exist(numMachine, numUser)) {  
	    
	    //to get the path of the private ssh key generated
	    /*keypath.append(mlocalAccount->getUserId()+"_"+mlocalAccount->getMachineId());
	    
	    //to complete the previous cmd with the ssk key path 
	    cmd.append(keypath);
	    
	    std::cout << std::endl << "Command to generate the ssh key:"+cmd << std::endl;
	   
	    //To check if this key has been already generated by the system
	    publicKeyPath = keypath;
	    publicKeyPath.append(".pub");
	    
	    std::ifstream ifile (publicKeyPath.c_str());
	   
	    //if the key doesn't already exist on ~/.ssh 
	    if (!ifile.is_open()) {
	    
	      //to generate the key
	      ret = system(cmd.c_str());
	      
	      //if the command was succesfully executed 
	      if (ret == 0) {*/
		//The sql code to insert the localAccount on the database
		mdatabaseVishnu->process(sqlInsert + "('"+numMachine+"', '"+numUser+"', '"+mlocalAccount->getAcLogin()+"', '\
		"+mlocalAccount->getSshKeyPath()+"', '"+mlocalAccount->getHomeDirectory()+"')");
		
		msshpublickey = machineServer.getAttribut("where \
		machineid='"+mlocalAccount->getMachineId()+"'", "sshpublickey");
		
		/*std::ifstream ifileCreated(publicKeyPath.c_str());
		//if the public key is created
		if (ifileCreated.is_open()) {
		  
		  ifileCreated.seekg (0, std::ios::end);
		  length = ifileCreated.tellg();
		  ifileCreated.seekg (0, std::ios::beg);
		
		  // allocate memory:
		  publicKeyContent = new char [length];
		  ifileCreated.read (publicKeyContent,length);
		  ifileCreated.close();

		  //get the content of the file	  
		  msshpublickey = std::string(publicKeyContent);		  
		  delete[] publicKeyContent;
		  */
		/*}//END if the public key is created
		else {
		  UMSVishnuException e (4, "The ssh key for the account has not been created");
		  throw e;
		}*/
		
	     /* }//END if the command was succesfully executed 
	      else {
		UMSVishnuException e (4, "There was a problem to generate the ssh key for this account");
		throw e;
	      }*/
	   /* }//END if the key doesn't already exist on ~/.ssh
	    else {
	      UMSVishnuException e (4, "Contact the administrator: \
	      an ssh key has been already generated for this account.");
	      throw e;
	    }*/
	  }//END if the local account does not exist
	  else {
	    UMSVishnuException e (4, "The local account already exists");
	    throw e;
	  }
	} //End if the machine exists and it is not locked
	else {
	  UMSVishnuException e (4, "The machine does not exist or it is locked");
	  throw e;
	}
      }//End if the session key is for the owner of the local account or the user is an admin
      else {
	UMSVishnuException e (4, "The userid is incompatible with the session key");
	throw e;
      }
    }//End if the user exists
    else {
      UMSVishnuException e (4, "The user is unknown");
      throw e;
    }
    //delete machine;
  }
  catch (SystemException& e) {
    throw;
  }
  
  return 0;
}
 
int 
LocalAccountServer::update() {
  std::string numMachine;
  std::string numUser;
  std::string sqlCommand = "";
  
  try {
    //Creation of the object user
    UserServer userServer = UserServer(msessionServer);
    userServer.init();
    
    //Creation of the object machine
    UMS_Data::Machine *machine = new UMS_Data::Machine();
    machine->setMachineId(mlocalAccount->getMachineId());
    MachineServer machineServer = MachineServer(machine);
    
    //if the user exists 
    if (userServer.exist()) {
      //if the session key is for the owner of the local account or the user is an admin
      if (userServer.getData().getUserId().compare(mlocalAccount->getUserId()) == 0 ||
	userServer.isAdmin()){
  
	//if the machine exists and it is not locked
	if (machineServer.getAttribut("where machineid='"+mlocalAccount->getMachineId()+"'\
	  and status=1").size() != 0) {  
	  
	  //To get the database number id of the machine
	  numMachine = machineServer.getAttribut("where machineid='"+mlocalAccount->getMachineId()+"'");
	  //To get the database number id of the user
	  numUser = userServer.getAttribut("where userid='"+mlocalAccount->getUserId()+"'");
	
	  //if the local account exists
	  if (exist(numMachine, numUser)) {  
	    
	    //if a new acLogin has been defined
	    if (mlocalAccount->getAcLogin().size() != 0) {
	    sqlCommand.append("UPDATE account SET aclogin='"+mlocalAccount->getAcLogin()+"'\
	    where machine_nummachineid="+numMachine+" and users_numuserid="+numUser+";");	  
	    }
	   
	    //if a new sshpathkey has been defined
	    if (mlocalAccount->getSshKeyPath().size() != 0) {
	    sqlCommand.append("UPDATE account SET sshpathkey='"+mlocalAccount->getSshKeyPath()+"'\
	    where machine_nummachineid="+numMachine+" and users_numuserid="+numUser+";");	  
	    }
	    
	    //if a new home directory has been defined
	    if (mlocalAccount->getHomeDirectory().size() != 0) {
	    sqlCommand.append("UPDATE account SET home='"+mlocalAccount->getHomeDirectory()+"'\
	    where machine_nummachineid="+numMachine+" and users_numuserid="+numUser+";");	  
	    }
	    
	    std::cout <<"SQL COMMAND:"<<sqlCommand;
	    mdatabaseVishnu->process(sqlCommand.c_str());
	  
	  }//END if the local account exists
	  else {
	    UMSVishnuException e (4, "The local account does not exists");
	    throw e;
	  }
	} //End if the machine exists and it is not locked
	else {
	  UMSVishnuException e (4, "The machine does not exist or it is locked");
	  throw e;
	}
      }//if the session key is for the owner of the local account or the user is an admin
      else {
	UMSVishnuException e (4, "The userid is incompatible with the session key");
	throw e;
      }
    }//End if the user exists
    else {
      UMSVishnuException e (4, "The user is unknown");
      throw e;
    }
    //delete machine;
  }
  catch (SystemException& e) {
    throw;
 }
  
  
  
  
  return 0;
}
 
int 
LocalAccountServer::deleteLocalAccount() {
  //TODO: Effacer les clés présentes dans ~/.ssh
  int ret;
  std::string numMachine;
  std::string numUser;
  /*std::string vishnukeypath;
  std::string cmdToremove = "rm ";
  */
  try {
    //Creation of the object user
    UserServer userServer = UserServer(msessionServer);
    userServer.init();
    
    //Creation of the object machine
    UMS_Data::Machine *machine = new UMS_Data::Machine();
    machine->setMachineId(mlocalAccount->getMachineId());
    MachineServer machineServer = MachineServer(machine);
    
    //if the user exists 
    if (userServer.exist()) {
      //if the session key is for the owner of the local account or the user is an admin
      if (userServer.getData().getUserId().compare(mlocalAccount->getUserId()) == 0 ||
	userServer.isAdmin()){
  
	//if the machine exists and it is not locked
	if (machineServer.getAttribut("where machineid='"+mlocalAccount->getMachineId()+"'\
	  and status=1").size() != 0) {  
	  
	  //To get the database number id of the machine
	  numMachine = machineServer.getAttribut("where machineid='"+mlocalAccount->getMachineId()+"'");
	  //To get the database number id of the user
	  numUser = userServer.getAttribut("where userid='"+mlocalAccount->getUserId()+"'");
	
	  //if the local account exists
	  if (exist(numMachine, numUser)) {  
	    
	    //To get the path od the couple private/public ssh key associated to this local account
	    //vishnukeypath = getAttribut("where machine_nummachineid="+numMachine+" and users_numuserid="+numUser, "vishnukey");
	    
	    //To remove the local account from the database
	    mdatabaseVishnu->process("DELETE FROM account \
	    where machine_nummachineid="+numMachine+" and users_numuserid="+numUser);
	    
	    
	    /*std::cout << std::endl << "vishnukey:"+vishnukeypath << std::endl;
	    
	    cmdToremove.append(vishnukeypath+" && rm "+vishnukeypath+".pub");
	    ret = system(cmdToremove.c_str());
	    
	    std::cout << std::endl << "Command to remove files:"+cmdToremove << std::endl;
	    
	    if (ret != 0) {
	      UMSVishnuException e (4, "There was a problem to destroy the ssh keys associated to this local account");
	      throw e;
	    }*/
	     
	  }//END if the local account exists
	  else {
	    UMSVishnuException e (4, "This local account is unknown");
	    throw e;
	  }
	} //END if the machine exists and it is not locked
	else {
	  UMSVishnuException e (4, "The machine does not exist or it is locked");
	  throw e;
	}
      }//END if the session key is for the owner of the local account or the user is an admin
      else {
	UMSVishnuException e (4, "The user is not an admin");
	throw e;
      }
    }//End if the user exists
    else {
      UMSVishnuException e (4, "The user is unknown");
      throw e;
    }
    //delete machine;
  }
  catch (SystemException& e) {
    throw;
 }
 
  return 0;
}
/**
* \fn ~LocalAccountServer
* \brief Destructor
*/ 
LocalAccountServer::~LocalAccountServer() {
  //delete mlocalAccount;
}
/**
* \brief Function to get localAccount information
* \fn UMS_Data::LocalAccount getData()
* \return  The LocalAccount data structure
*/ 
UMS_Data::LocalAccount *
LocalAccountServer::getData() {
  return mlocalAccount;
}
/**
* \brief Function to get localAccount information from the database vishnu
* \fn getAttribut(std::string condition, std::string attrname);
* \param condition The condition of the select request
* \param attrname the name of the attribut to get
* \return the value of the attribut or empty string if no results
*/  
std::string 
LocalAccountServer::getAttribut(std::string condition, std::string attrname) {
  DatabaseResult* result;
  std::vector<std::string>::iterator ii;
  
  std::string sqlCommand("SELECT "+attrname+" FROM account "+condition);
  std::cout <<"SQL COMMAND:"<<sqlCommand;
    
  try {
    result = mdatabaseVishnu->getResult(sqlCommand.c_str());
  } 
  catch (SystemException& e) {
    throw;
  }
  if (result->getNbTuples() != 0) {
    result->print();
    std::vector<std::string> tmp = result->get(0);  
    ii=tmp.begin();
    return (*ii);
  } 
  else {
    return "";
  }
}

bool 
LocalAccountServer::exist(std::string idmachine, std::string iduser) {
 
  try {
    return (getAttribut("where machine_nummachineid="+idmachine+" and users_numuserid="+iduser).size() != 0);
  }
  catch (SystemException& e) {
    throw;
  }
  
}
  
/**
* \brief Function to get the content of the public ssh generated
* \fn std::string getPublicKey()
* \return The content of the ssh public key generated
*/
std::string
LocalAccountServer::getPublicKey() {
  return msshpublickey;
}
    
  
  
/*
UMS_Data::ListLocalAccounts  LocalAccountServer::list(SessionServer session, UMS_Data::ListLocalAccOptions  options)
{
	return 0;
}*/
