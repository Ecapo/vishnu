#include "MapperRegistry.hh"

using namespace std;

static MapperRegistry* reg = NULL;

MapperRegistry::MapperRegistry(){
  mapper = map<string, Mapper*>();
}

MapperRegistry::~MapperRegistry(){
}


int 
MapperRegistry::addMapper(string s, Mapper* mapper){
  if (!reg){
    reg = new MapperRegistry();
  }
  if (!contains(s)){
    mapper.insert( pair<string, Mapper*>(s, mapper));
  }
  display();
  return 0;
}

int 
MapperRegistry::removeMapper(string s){
  if (!reg){
    return 0;
  }
  if (contains(s)){
    mapper.erase(s);
  }
  return 0;
}

int 
MapperRegistry::getMapper(string s, Mapper** mapper){
  if (!mapper){
    InternalVishnuException e = InternalVishnuException();
    e.setType(VishnuException::INTERNAL);
    e.setMsg(6);
    e.setMsgComp("Error invalid registry");
    throw(e);
  }
  map<string, Mapper*>::const_iterator it; 
  for (it = mapper.begin() ; it != mapper.end() ; it++){
    if (s.compare(it->first)){
      *mapper = it->second;
      display();
      return 0;
    }
  }
  InternalVishnuException e = InternalVishnuException();
  e.setType(VishnuException::INTERNAL);
  e.setMsg(6);
  e.setMsgComp("Error invalid mapper");
  display();
  throw(e);
  return 0;
}

bool 
MapperRegistry::contains(string s){
  map<string, Mapper*>::const_iterator it; ;
  for (it = mapper.begin() ; it != mapper.end() ; it++){
    if (s.compare(it->first)){
      return true;
    }
  }
  return false;
}

void MapperRegistry::display(){
  map<string, Mapper*>::const_iterator it; 
  for (it = mapper.begin() ; it != mapper.end() ; it++){
    cout << "key = " << it->first << " and val = " << it->second << endl;
  }
}
