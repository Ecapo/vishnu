// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace UMS_Data_Proto {

namespace {

const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* User_PrivilegeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* User_StatusType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ListUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListUsers_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_2eproto() {
  protobuf_AddDesc_user_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user.proto");
  GOOGLE_CHECK(file != NULL);
  User_descriptor_ = file->message_type(0);
  static const int User_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, email_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  User_PrivilegeType_descriptor_ = User_descriptor_->enum_type(0);
  User_StatusType_descriptor_ = User_descriptor_->enum_type(1);
  ListUsers_descriptor_ = file->message_type(1);
  static const int ListUsers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUsers, users_),
  };
  ListUsers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListUsers_descriptor_,
      ListUsers::default_instance_,
      ListUsers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUsers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUsers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListUsers));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListUsers_descriptor_, &ListUsers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_2eproto() {
  delete User::default_instance_;
  delete User_reflection_;
  delete ListUsers::default_instance_;
  delete ListUsers_reflection_;
}

void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuser.proto\022\016UMS_Data_Proto\"\240\002\n\004User\022\016\n"
    "\006userId\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\021\n\tfirst"
    "name\030\003 \001(\t\022\020\n\010lastname\030\004 \001(\t\022;\n\tprivileg"
    "e\030\005 \001(\0162\".UMS_Data_Proto.User.PrivilegeT"
    "ype:\004USER\0227\n\006status\030\006 \001(\0162\037.UMS_Data_Pro"
    "to.User.StatusType:\006ACTIVE\022\r\n\005email\030\007 \001("
    "\t\"$\n\rPrivilegeType\022\010\n\004USER\020\001\022\t\n\005ADMIN\020\002\""
    "&\n\nStatusType\022\014\n\010INACTIVE\020\001\022\n\n\006ACTIVE\020\002\""
    "0\n\tListUsers\022#\n\005users\030\001 \003(\0132\024.UMS_Data_P"
    "roto.User", 369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user.proto", &protobuf_RegisterTypes);
  User::default_instance_ = new User();
  ListUsers::default_instance_ = new ListUsers();
  User::default_instance_->InitAsDefaultInstance();
  ListUsers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* User_PrivilegeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_PrivilegeType_descriptor_;
}
bool User_PrivilegeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const User_PrivilegeType User::USER;
const User_PrivilegeType User::ADMIN;
const User_PrivilegeType User::PrivilegeType_MIN;
const User_PrivilegeType User::PrivilegeType_MAX;
const int User::PrivilegeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* User_StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_StatusType_descriptor_;
}
bool User_StatusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const User_StatusType User::INACTIVE;
const User_StatusType User::ACTIVE;
const User_StatusType User::StatusType_MIN;
const User_StatusType User::StatusType_MAX;
const int User::StatusType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int User::kUserIdFieldNumber;
const int User::kPasswordFieldNumber;
const int User::kFirstnameFieldNumber;
const int User::kLastnameFieldNumber;
const int User::kPrivilegeFieldNumber;
const int User::kStatusFieldNumber;
const int User::kEmailFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privilege_ = 1;
  status_ = 2;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
    privilege_ = 1;
    status_ = 2;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_firstname;
        break;
      }
      
      // optional string firstname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lastname;
        break;
      }
      
      // optional string lastname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_privilege;
        break;
      }
      
      // optional .UMS_Data_Proto.User.PrivilegeType privilege = 5 [default = USER];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilege:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UMS_Data_Proto::User_PrivilegeType_IsValid(value)) {
            set_privilege(static_cast< ::UMS_Data_Proto::User_PrivilegeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // optional .UMS_Data_Proto.User.StatusType status = 6 [default = ACTIVE];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UMS_Data_Proto::User_StatusType_IsValid(value)) {
            set_status(static_cast< ::UMS_Data_Proto::User_StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }
      
      // optional string email = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->firstname(), output);
  }
  
  // optional string lastname = 4;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lastname(), output);
  }
  
  // optional .UMS_Data_Proto.User.PrivilegeType privilege = 5 [default = USER];
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->privilege(), output);
  }
  
  // optional .UMS_Data_Proto.User.StatusType status = 6 [default = ACTIVE];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }
  
  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->email(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional string firstname = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firstname(), target);
  }
  
  // optional string lastname = 4;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lastname(), target);
  }
  
  // optional .UMS_Data_Proto.User.PrivilegeType privilege = 5 [default = USER];
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->privilege(), target);
  }
  
  // optional .UMS_Data_Proto.User.StatusType status = 6 [default = ACTIVE];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }
  
  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string firstname = 3;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }
    
    // optional string lastname = 4;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }
    
    // optional .UMS_Data_Proto.User.PrivilegeType privilege = 5 [default = USER];
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privilege());
    }
    
    // optional .UMS_Data_Proto.User.StatusType status = 6 [default = ACTIVE];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional string email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_privilege()) {
      set_privilege(from.privilege());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(firstname_, other->firstname_);
    std::swap(lastname_, other->lastname_);
    std::swap(privilege_, other->privilege_);
    std::swap(status_, other->status_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListUsers::kUsersFieldNumber;
#endif  // !_MSC_VER

ListUsers::ListUsers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListUsers::InitAsDefaultInstance() {
}

ListUsers::ListUsers(const ListUsers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListUsers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListUsers::~ListUsers() {
  SharedDtor();
}

void ListUsers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListUsers_descriptor_;
}

const ListUsers& ListUsers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();  return *default_instance_;
}

ListUsers* ListUsers::default_instance_ = NULL;

ListUsers* ListUsers::New() const {
  return new ListUsers;
}

void ListUsers::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UMS_Data_Proto.User users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UMS_Data_Proto.User users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListUsers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UMS_Data_Proto.User users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListUsers::ByteSize() const {
  int total_size = 0;
  
  // repeated .UMS_Data_Proto.User users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListUsers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListUsers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListUsers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListUsers::MergeFrom(const ListUsers& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListUsers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsers::CopyFrom(const ListUsers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsers::IsInitialized() const {
  
  return true;
}

void ListUsers::Swap(ListUsers* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListUsers_descriptor_;
  metadata.reflection = ListUsers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UMS_Data_Proto

// @@protoc_insertion_point(global_scope)
