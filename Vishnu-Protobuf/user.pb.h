// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_user_2eproto__INCLUDED
#define PROTOBUF_user_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace UMS_Data_Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_2eproto();
void protobuf_AssignDesc_user_2eproto();
void protobuf_ShutdownFile_user_2eproto();

class User;
class ListUsers;

enum User_PrivilegeType {
  User_PrivilegeType_USER = 1,
  User_PrivilegeType_ADMIN = 2
};
bool User_PrivilegeType_IsValid(int value);
const User_PrivilegeType User_PrivilegeType_PrivilegeType_MIN = User_PrivilegeType_USER;
const User_PrivilegeType User_PrivilegeType_PrivilegeType_MAX = User_PrivilegeType_ADMIN;
const int User_PrivilegeType_PrivilegeType_ARRAYSIZE = User_PrivilegeType_PrivilegeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* User_PrivilegeType_descriptor();
inline const ::std::string& User_PrivilegeType_Name(User_PrivilegeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    User_PrivilegeType_descriptor(), value);
}
inline bool User_PrivilegeType_Parse(
    const ::std::string& name, User_PrivilegeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<User_PrivilegeType>(
    User_PrivilegeType_descriptor(), name, value);
}
enum User_StatusType {
  User_StatusType_INACTIVE = 1,
  User_StatusType_ACTIVE = 2
};
bool User_StatusType_IsValid(int value);
const User_StatusType User_StatusType_StatusType_MIN = User_StatusType_INACTIVE;
const User_StatusType User_StatusType_StatusType_MAX = User_StatusType_ACTIVE;
const int User_StatusType_StatusType_ARRAYSIZE = User_StatusType_StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* User_StatusType_descriptor();
inline const ::std::string& User_StatusType_Name(User_StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    User_StatusType_descriptor(), value);
}
inline bool User_StatusType_Parse(
    const ::std::string& name, User_StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<User_StatusType>(
    User_StatusType_descriptor(), name, value);
}
// ===================================================================

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();
  
  User(const User& from);
  
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();
  
  void Swap(User* other);
  
  // implements Message ----------------------------------------------
  
  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef User_PrivilegeType PrivilegeType;
  static const PrivilegeType USER = User_PrivilegeType_USER;
  static const PrivilegeType ADMIN = User_PrivilegeType_ADMIN;
  static inline bool PrivilegeType_IsValid(int value) {
    return User_PrivilegeType_IsValid(value);
  }
  static const PrivilegeType PrivilegeType_MIN =
    User_PrivilegeType_PrivilegeType_MIN;
  static const PrivilegeType PrivilegeType_MAX =
    User_PrivilegeType_PrivilegeType_MAX;
  static const int PrivilegeType_ARRAYSIZE =
    User_PrivilegeType_PrivilegeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PrivilegeType_descriptor() {
    return User_PrivilegeType_descriptor();
  }
  static inline const ::std::string& PrivilegeType_Name(PrivilegeType value) {
    return User_PrivilegeType_Name(value);
  }
  static inline bool PrivilegeType_Parse(const ::std::string& name,
      PrivilegeType* value) {
    return User_PrivilegeType_Parse(name, value);
  }
  
  typedef User_StatusType StatusType;
  static const StatusType INACTIVE = User_StatusType_INACTIVE;
  static const StatusType ACTIVE = User_StatusType_ACTIVE;
  static inline bool StatusType_IsValid(int value) {
    return User_StatusType_IsValid(value);
  }
  static const StatusType StatusType_MIN =
    User_StatusType_StatusType_MIN;
  static const StatusType StatusType_MAX =
    User_StatusType_StatusType_MAX;
  static const int StatusType_ARRAYSIZE =
    User_StatusType_StatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusType_descriptor() {
    return User_StatusType_descriptor();
  }
  static inline const ::std::string& StatusType_Name(StatusType value) {
    return User_StatusType_Name(value);
  }
  static inline bool StatusType_Parse(const ::std::string& name,
      StatusType* value) {
    return User_StatusType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string firstname = 3;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstnameFieldNumber = 3;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  
  // optional string lastname = 4;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastnameFieldNumber = 4;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  
  // optional .UMS_Data_Proto.User.PrivilegeType privilege = 5 [default = USER];
  inline bool has_privilege() const;
  inline void clear_privilege();
  static const int kPrivilegeFieldNumber = 5;
  inline ::UMS_Data_Proto::User_PrivilegeType privilege() const;
  inline void set_privilege(::UMS_Data_Proto::User_PrivilegeType value);
  
  // optional .UMS_Data_Proto.User.StatusType status = 6 [default = ACTIVE];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::UMS_Data_Proto::User_StatusType status() const;
  inline void set_status(::UMS_Data_Proto::User_StatusType value);
  
  // optional string email = 7;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 7;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  
  // @@protoc_insertion_point(class_scope:UMS_Data_Proto.User)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_privilege();
  inline void clear_has_privilege();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_email();
  inline void clear_has_email();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* userid_;
  ::std::string* password_;
  ::std::string* firstname_;
  ::std::string* lastname_;
  int privilege_;
  int status_;
  ::std::string* email_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class ListUsers : public ::google::protobuf::Message {
 public:
  ListUsers();
  virtual ~ListUsers();
  
  ListUsers(const ListUsers& from);
  
  inline ListUsers& operator=(const ListUsers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUsers& default_instance();
  
  void Swap(ListUsers* other);
  
  // implements Message ----------------------------------------------
  
  ListUsers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListUsers& from);
  void MergeFrom(const ListUsers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .UMS_Data_Proto.User users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::UMS_Data_Proto::User& users(int index) const;
  inline ::UMS_Data_Proto::User* mutable_users(int index);
  inline ::UMS_Data_Proto::User* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::UMS_Data_Proto::User >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::UMS_Data_Proto::User >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:UMS_Data_Proto.ListUsers)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::UMS_Data_Proto::User > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static ListUsers* default_instance_;
};
// ===================================================================


// ===================================================================

// User

// optional string userId = 1;
inline bool User::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& User::userid() const {
  return *userid_;
}
inline void User::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void User::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void User::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* User::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool User::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& User::password() const {
  return *password_;
}
inline void User::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void User::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void User::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* User::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string firstname = 3;
inline bool User::has_firstname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_firstname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& User::firstname() const {
  return *firstname_;
}
inline void User::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void User::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void User::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* User::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string lastname = 4;
inline bool User::has_lastname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_lastname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& User::lastname() const {
  return *lastname_;
}
inline void User::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void User::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void User::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* User::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .UMS_Data_Proto.User.PrivilegeType privilege = 5 [default = USER];
inline bool User::has_privilege() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_privilege() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_privilege() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_privilege() {
  privilege_ = 1;
  clear_has_privilege();
}
inline ::UMS_Data_Proto::User_PrivilegeType User::privilege() const {
  return static_cast< ::UMS_Data_Proto::User_PrivilegeType >(privilege_);
}
inline void User::set_privilege(::UMS_Data_Proto::User_PrivilegeType value) {
  GOOGLE_DCHECK(::UMS_Data_Proto::User_PrivilegeType_IsValid(value));
  set_has_privilege();
  privilege_ = value;
}

// optional .UMS_Data_Proto.User.StatusType status = 6 [default = ACTIVE];
inline bool User::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_status() {
  status_ = 2;
  clear_has_status();
}
inline ::UMS_Data_Proto::User_StatusType User::status() const {
  return static_cast< ::UMS_Data_Proto::User_StatusType >(status_);
}
inline void User::set_status(::UMS_Data_Proto::User_StatusType value) {
  GOOGLE_DCHECK(::UMS_Data_Proto::User_StatusType_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string email = 7;
inline bool User::has_email() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_email() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_email() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& User::email() const {
  return *email_;
}
inline void User::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void User::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void User::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* User::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ListUsers

// repeated .UMS_Data_Proto.User users = 1;
inline int ListUsers::users_size() const {
  return users_.size();
}
inline void ListUsers::clear_users() {
  users_.Clear();
}
inline const ::UMS_Data_Proto::User& ListUsers::users(int index) const {
  return users_.Get(index);
}
inline ::UMS_Data_Proto::User* ListUsers::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::UMS_Data_Proto::User* ListUsers::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UMS_Data_Proto::User >&
ListUsers::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::UMS_Data_Proto::User >*
ListUsers::mutable_users() {
  return &users_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UMS_Data_Proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UMS_Data_Proto::User_PrivilegeType>() {
  return ::UMS_Data_Proto::User_PrivilegeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UMS_Data_Proto::User_StatusType>() {
  return ::UMS_Data_Proto::User_StatusType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_2eproto__INCLUDED
